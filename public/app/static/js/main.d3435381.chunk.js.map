{"version":3,"sources":["api.ts","login/LoginForm.tsx","login/RegisterForm.tsx","utilities.ts","PaginationControl.tsx","PropertyEditor.tsx","DestinationsPage.tsx","GeneralPage.tsx","letters/LettersCategorizedSubpage.tsx","letters/NewLetterModal.tsx","letters/LettersTableSubpage.tsx","letters/LettersPageRouter.tsx","Panel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API","axiosStatic","create","baseURL","withCredentials","LoginForm","props","useState","username","setUsername","password","setPassword","isLoading","setIsLoading","error","setError","onSubmit","e","preventDefault","console","log","formData","FormData","append","post","then","get","response","onLogin","data","catch","reason","status","finally","style","maxWidth","className","type","onChange","ev","target","value","onClick","onPageSwitch","RegisterForm","confirmPassword","setConfirmPassword","success","setSuccess","trim","length","Spinner","animation","size","variant","destinationAddressToString","d","parts","part","street","push","number","block","stair","apartment","locality","commune","county","postalCode","filter","map","join","fields","fd","Object","keys","forEach","field","insertQueryParam","key","encodeURIComponent","kvp","document","location","search","substr","split","i","startsWith","pair","PaginationControl","query","URLSearchParams","useLocation","currentPage","parseInt","Array","pages","fill","val","index","classNames","to","toString","ProperyEditor","assign","subject","newSubject","setNewSubject","modified","setModified","modifySubject","copy","some","prop","onModify","differences","children","sort","a","b","orderTable","findIndex","x","translationTable","includes","classnames","isHighlighted","handleModify","stateReducer","state","action","payload","destinations","newDests","_id","isCurrentModified","isPropertyEditorHighlighted","Error","DestinationsPage","history","useHistory","useReducer","entriesPerPage","dispatch","totalPages","Math","floor","toId","currentId","currentDest","find","dest","doUnsavedAlert","setTimeout","useEffect","when","message","name","slice","id","newrow","handleSwitchRow","cursor","row","observations","objectHash","window","confirm","diff","newVal","isOriginal","GeneralPage","Button","onLogout","LettersCategorizedSubpage","letters","lett","destinationId","destination","incomingLetters","outgoingLetters","letter","code","receivedDate","handwritten","writtenDate","sentDate","NewLetterModal","letterType","setLetterType","setDestination","Modal","show","onHide","Header","closeButton","Title","Body","disabled","Footer","LettersTableSubpage","isAddNewModalShown","destinationFilter","typeFilter","filteredLetters","res","currentLetter","handleAddNewModalVisibility","newVis","newId","retrieveDest","destId","onAddNew","price","onRemove","newObj","LettersPageRouter","match","useRouteMatch","handleAddNew","Promise","all","undefined","result","newLetter","handleRemove","_method","dests","ActivablePill","text","url","path","exact","activeOnlyWhenExact","newLetts","timestamp","CustomNavLink","label","Panel","Nav","Item","App","currentUser","setCurrentUser","isInitializing","setIsInitializing","setCurrentPage","hourNow","Date","getHours","darkMode","setDarkMode","elem","getElementById","alert","prefix","getAttribute","setAttribute","styleModeSwitch","user","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d3435381.chunk.js","sourcesContent":["\r\nimport axiosStatic from \"axios\";\r\n\r\nconst API = axiosStatic.create({\r\n    baseURL: \"http://localhost:822/api/\",\r\n    withCredentials: true\r\n});\r\n\r\nexport default API;","import { AxiosError } from \"axios\";\r\nimport React, { FormEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport API from \"../api\";\r\nimport { UserData } from \"../apiTypes\";\r\n\r\nexport default function LoginForm(props: {\r\n\tonLogin: (user: UserData) => void,\r\n\tonPageSwitch: () => void\r\n}) {\r\n\tlet [username, setUsername] = useState(\"\");\r\n\tlet [password, setPassword] = useState(\"\");\r\n\tlet [isLoading, setIsLoading] = useState(false);\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\r\n\tconst tryAuth = (e: FormEvent) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconsole.log(\"called!\");\r\n\t\tlet formData = new FormData();\r\n\t\tformData.append(\"username\", username);\r\n\t\tformData.append(\"password\", password);\r\n\t\tsetIsLoading(true);\r\n\t\tsetError(null);\r\n\t\tAPI.post(\"/login\", formData).then(() => {\r\n\t\t\tAPI.get(\"/user\").then((response) => {\r\n\t\t\t\tprops.onLogin(response.data.data);\r\n\t\t\t});\r\n\t\t}).catch((reason: AxiosError) => {\r\n\t\t\tswitch (reason.response?.data.status) {\r\n\t\t\t\tcase \"user-not-found\":\r\n\t\t\t\t\tsetError(\"Utilizatorul nu a fost găsit!\"); break;\r\n\t\t\t\tcase \"password-invalid\":\r\n\t\t\t\t\tsetError(\"Parola dvs. este incorectă!\"); break;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetError(\"A avut loc o eroare necunoscută: \" + reason.response?.data.status);\r\n\t\t\t}\r\n\t\t}).finally(() => {\r\n\t\t\tsetIsLoading(false);\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={tryAuth} style={{maxWidth: \"480px\"}}>\r\n\t\t\t<h2>Autentificare</h2>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Nume utilizator:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"text\" onChange={(ev) => { setUsername(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Parola:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"password\" onChange={(ev) => { setPassword(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t{ error &&\r\n\t\t\t\t<div className=\"alert alert-danger\">{error}</div>\r\n\t\t\t}\r\n\t\t\t<button className=\"btn btn-primary\" type=\"submit\">\r\n\t\t\t\tAutentificare\r\n\t\t\t\t{isLoading && <span className=\"spinner-border-sm spinner-border border-secondary ml-2\" />}\r\n\t\t\t</button>\r\n\t\t\t<button className=\"btn btn-secondary\" onClick={props.onPageSwitch}>\r\n\t\t\t\tÎnregistrare\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}","import { AxiosError } from 'axios';\r\nimport React, { FormEvent, useState } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport API from '../api';\r\n\r\nexport default function RegisterForm(props: {\r\n\tonPageSwitch: () => void\r\n}) {\r\n\tlet [username, setUsername] = useState(\"\");\r\n\tlet [password, setPassword] = useState(\"\");\r\n\tlet [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\tlet [success, setSuccess] = useState<string | null>(null);\r\n\tlet [isLoading, setIsLoading] = useState(false);\r\n\treturn (\r\n\t\t<form onSubmit={tryRegister} style={{maxWidth: \"480px\"}}>\r\n\t\t\t<h2>Înregistrare</h2>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Nume utilizator:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"text\" onChange={(ev) => { setUsername(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Parola:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"password\" onChange={(ev) => { setPassword(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Confirmă parola:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"password\" onChange={(ev) => { setConfirmPassword(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t{ error &&\r\n\t\t\t\t<div className=\"alert alert-danger\">{error}</div>\r\n\t\t\t}\r\n\t\t\t{ success &&\r\n\t\t\t\t<div className=\"alert alert-success\">{success}</div>\r\n\t\t\t}\r\n\t\t\t<button className=\"btn btn-primary\" type=\"submit\">\r\n\t\t\t\tÎnregistrare\r\n\t\t\t\t{isLoading && <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\" className=\"ml-2\" />}\r\n\t\t\t</button>\r\n\t\t\t<button className=\"btn btn-secondary\" onClick={props.onPageSwitch}>\r\n\t\t\t\tAutentificare\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n\r\n\tfunction tryRegister(e: FormEvent) {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (password !== confirmPassword) {\r\n\t\t\tsetError(\"Parolele nu coincid!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (password.trim().length === 0 || username.trim().length === 0) {\r\n\t\t\tsetError(\"Ați lăsat unul dintre câmpuri liber!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// do register\r\n\t\tlet formData = new FormData();\r\n\t\tformData.append(\"username\", username);\r\n\t\tformData.append(\"password\", password);\r\n\t\tsetIsLoading(true);\r\n\t\tAPI.post(\"/register\", formData).then((response) => {\r\n\t\t\t// all's ok!\r\n\t\t\t// props.onPageSwitch();\r\n\t\t\tsetIsLoading(false);\r\n\t\t\tsetSuccess(\"Te-ai înregistrat cu succes! Mergi spre autentificare.\");\r\n\t\t}).catch((reason: AxiosError) => {\r\n\t\t\tlet status = reason.response?.data.status;\r\n\t\t\tif (status === \"username-not-unique\") {\r\n\t\t\t\tsetError(\"Numele de utilizator există deja! Alegeți altul.\");\r\n\t\t\t} else {\r\n\t\t\t\tsetError(\"A avut loc o eroare necunoscută.\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}","\r\nimport { DestinationData } from \"./apiTypes\";\r\n\r\n\r\nexport function destinationAddressToString(d: DestinationData) {\r\n    let parts = [];\r\n    let part = [];\r\n    if (d.street)\r\n        part.push(`Str. ${d.street}`);\r\n    if (d.number)\r\n        part.push(`Nr. ${d.number}`);\r\n    parts.push(part);\r\n    part = [];\r\n    if (d.block)\r\n        part.push(`Bloc ${d.block}`);\r\n    if (d.stair)\r\n        part.push(`Scara ${d.stair}`);\r\n    if (d.apartment)\r\n        part.push(`Ap. ${d.apartment}`);\r\n    parts.push(part);\r\n    part = [];\r\n    if (d.locality && d.commune)\r\n        part.push(`Sat ${d.locality}`);\r\n    if (d.locality && !d.commune)\r\n        part.push(`Oraș ${d.locality}`);\r\n    if (d.commune)\r\n        part.push(`Com. ${d.commune}`);\r\n    parts.push(part);\r\n    part = [];\r\n    if (d.county)\r\n        part.push(`Jud. ${d.county}`);\r\n    if (d.postalCode)\r\n        part.push(`Cod poștal ${d.postalCode}`);\r\n    parts.push(part);\r\n    return parts\r\n        .filter(part => part.length > 0)\r\n        .map(part => part.join(', '))\r\n        .join('\\n');\r\n}\r\n\r\nexport function formData(fields: {[key: string]: any}) {\r\n    let fd = new FormData();\r\n    Object.keys(fields).forEach(field => {\r\n        fd.append(field, fields[field]);\r\n    });\r\n    return fd;\r\n}\r\n\r\nexport function insertQueryParam(key: string, value: string) {\r\n    key = encodeURIComponent(key);\r\n    value = encodeURIComponent(value);\r\n\r\n    // kvp looks like ['key1=value1', 'key2=value2', ...]\r\n    var kvp = document.location.search.substr(1).split('&');\r\n    let i=0;\r\n\r\n    for(; i<kvp.length; i++){\r\n        if (kvp[i].startsWith(key + '=')) {\r\n            let pair = kvp[i].split('=');\r\n            pair[1] = value;\r\n            kvp[i] = pair.join('=');\r\n            break;\r\n        }\r\n    }\r\n\r\n    if(i >= kvp.length){\r\n        kvp[kvp.length] = [key,value].join('=');\r\n    }\r\n\r\n    // can return this or...\r\n    let params = kvp.join('&');\r\n\r\n    // reload page with new params\r\n    // document.location.search = params;\r\n\r\n    return params;\r\n}\r\n\r\nexport function letterTranslationTable() {\r\n    return {\r\n        code: \"Cod\",\r\n        handwritten: \"De mână\",\r\n        receivedDate: \"Primit\",\r\n        price: \"Preț\",\r\n        observations: \"Observații\",\r\n        writtenDate: \"Scris\",\r\n        sentDate: \"Trimis\"\r\n    };\r\n}\r\nexport function destinationTranslationTable() {\r\n    return {\r\n        name: \"Nume\",\r\n        street: \"Strada\",\r\n        number: \"Numărul\",\r\n        block: \"Bloc\",\r\n        stair: \"Scara\",\r\n        apartment: \"Apartament\",\r\n        locality: \"Localitate\",\r\n        commune: \"Comuna\",\r\n        county: \"Județul\",\r\n        postalCode: \"Cod poștal\",\r\n        observations: \"Observații\"\r\n    };\r\n}\r\nexport function letterOrderTable() {\r\n    return [\r\n        \"code\",\r\n        \"handwritten\",\r\n        \"writtenDate\",\r\n        \"sentDate\",\r\n        \"receivedDate\",\r\n        \"price\",\r\n        \"observations\"\r\n    ];\r\n}\r\nexport function destinationOrderTable() {\r\n    return [\r\n        \"name\",\r\n        \"street\",\r\n        \"number\",\r\n        \"block\",\r\n        \"stair\",\r\n        \"apartment\",\r\n        \"locality\",\r\n        \"commune\",\r\n        \"county\",\r\n        \"postalCode\",\r\n        \"observations\"\r\n    ];\r\n}","import classNames from \"classnames\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { insertQueryParam } from \"./utilities\";\r\n\r\nexport default function PaginationControl(props: {\r\n    pages: number;\r\n    currentPage?: number;\r\n    resetQueryParams?: {[key: string]: string};\r\n}) {\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const currentPage = props.currentPage ?? parseInt(query.get(\"p\") ?? \"0\");\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination mb-0 flex-wrap\">\r\n                {Array(props.pages).fill(0).map((val, index) => (\r\n                    <li className={classNames({\"page-item\": true, \"active\": index === currentPage})} key={index}>\r\n                        <Link to={`?` + insertQueryParam(\"p\", index.toString())} className=\"page-link\">\r\n                            {index+1}\r\n                        </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n\r\n}","import classnames from \"classnames\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nexport default function ProperyEditor(props: {\r\n    subject: {[key: string]: any};\r\n    onSubmit: (newVal: {[key: string]: any}) => void;\r\n    onModify?: (newVal: {[key: string]: any}, isOriginal: boolean) => void;\r\n    isHighlighted?: boolean;\r\n    children?: React.ReactElement;\r\n    translationTable: {[key: string]: string};\r\n    orderTable?: string[];\r\n}) {\r\n    let [newSubject, setNewSubject] = useState<typeof props.subject>(Object.assign({}, props.subject));\r\n    let [modified, setModified] = useState(false);\r\n\r\n    function handleModify(prop: string, value: any) {\r\n        let copy = Object.assign({}, newSubject);\r\n        copy[prop] = value;\r\n        modifySubject(copy);\r\n    }\r\n\r\n    function modifySubject(copy: {[key: string]: any}) {\r\n        let modified = Object.keys(props.subject).some((prop) => props.subject[prop] !== copy[prop]);\r\n        setNewSubject(copy);\r\n        setModified(modified);\r\n        props.onModify && props.onModify(copy, !modified);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        props.onSubmit(newSubject);\r\n    }\r\n\r\n    function handleReset() {\r\n        let copy = Object.assign({}, props.subject);\r\n        modifySubject(copy);\r\n    }\r\n\r\n    let differences: string[] =\r\n        Object.keys(props.subject)\r\n        .filter((prop) => props.subject[prop] !== newSubject[prop]);\r\n\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-header\">\r\n                <h5 className=\"card-title\">Detalii</h5>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n                {props.children}\r\n                <table className=\"table table-sm table-bordered mb-0\">\r\n                    <tbody>\r\n                        {Object\r\n                        .keys(newSubject)\r\n                        .sort((a, b) => props.orderTable ? props.orderTable?.findIndex(x => x === a) - props.orderTable?.findIndex(x => x === b) : 0)\r\n                        .map((prop) => {\r\n                            if (!Object.keys(props.translationTable).includes(prop))\r\n                                return null;\r\n                            return (\r\n                                <tr className={classnames({\"bg-danger\": props.isHighlighted && differences.includes(prop) })} key={prop}>\r\n                                    <td>{props.translationTable[prop]}</td>\r\n                                    <td>\r\n                                        <input\r\n                                            className=\"form-control form-control-sm\"\r\n                                            type=\"text\"\r\n                                            value={newSubject[prop] ?? \"\"}\r\n                                            onChange={(ev) => { handleModify(prop, ev.target.value) }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n                {modified && \"Modificat\"}\r\n                <div className=\"btn-group float-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary btn-sm float-right\"\r\n                        onClick={handleReset}\r\n                    >\r\n                        Resetează\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary btn-sm float-right\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Salvează\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import classNames from \"classnames\";\r\nimport objectHash from \"object-hash\";\r\nimport React, { Reducer, useEffect, useReducer } from \"react\";\r\nimport { Prompt, useHistory, useLocation } from \"react-router\";\r\nimport API from \"./api\";\r\nimport { DestinationData } from \"./apiTypes\";\r\nimport { destinationAddressToString, destinationOrderTable, destinationTranslationTable, insertQueryParam } from \"./utilities\";\r\nimport PaginationControl from \"./PaginationControl\";\r\nimport PropertyEditor from \"./PropertyEditor\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype State = {\r\n    destinations: DestinationData[];\r\n    // currentRow: number | null;\r\n    entriesPerPage: number;\r\n    isCurrentModified: boolean;\r\n    isPropertyEditorHighlighted: boolean;\r\n    isLoading: boolean;\r\n};\r\ntype Action = \r\n  | { type: \"SET_LOADING\", payload: boolean }\r\n  | { type: \"SET_DESTINATIONS\", payload: DestinationData[] }\r\n  | { type: \"UPDATE_DESTINATION\", payload: DestinationData }\r\n  | { type: \"REMOVE_DESTINATION\", payload: number }\r\n//   | { type: \"SET_CURRENT_ROW\", payload: number | null }\r\n  | { type: \"SET_IS_CURRENT_MODIFIED\", payload: boolean }\r\n  | { type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\", payload: boolean };\r\n\r\nfunction DestinationsPage(props: {\r\n\r\n}) {\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const history = useHistory();\r\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(stateReducer, {\r\n        destinations: [],\r\n        // currentRow: null,\r\n        // currentPage,\r\n        entriesPerPage: 10,\r\n        isCurrentModified: false,\r\n        isPropertyEditorHighlighted: false,\r\n        isLoading: true\r\n    });\r\n\r\n    const totalPages = \r\n        Math.floor(state.destinations.length / state.entriesPerPage) +\r\n        (state.destinations.length % state.entriesPerPage !== 0 ? 1 : 0) +\r\n        (state.destinations.length === 0 ? 1 : 0);\r\n    const toId = query.get(\"toid\") ? parseInt(query.get(\"toid\") ?? \"-1\") : null;\r\n    const currentId = (query.get(\"id\") ? parseInt(query.get(\"id\") ?? \"-1\") : toId);\r\n    const currentDest = state.destinations.find(dest => dest._id === currentId);\r\n    const currentPage =\r\n        ((query.get(\"p\") === null && query.get(\"toid\") === null) || (query.get(\"id\") !== \"null\" && query.get(\"p\") !== null)) ? parseInt(query.get(\"p\") ?? \"0\") :\r\n        Math.floor(state.destinations.findIndex(dest => dest._id === toId) / state.entriesPerPage);\r\n    console.log(query.get(\"id\"), currentPage);\r\n\r\n    useEffect(() => {\r\n        API.get(\"/destinations\").then((response) => {\r\n            dispatch({\r\n                type: \"SET_DESTINATIONS\",\r\n                payload: response.data.data\r\n            });\r\n            dispatch({\r\n                type: \"SET_LOADING\",\r\n                payload: false\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    function handleSwitchRow(id: number) {\r\n        if (state.isCurrentModified) {\r\n            doUnsavedAlert();\r\n        } else {\r\n            const newrow = id === currentId ? \"null\" : id.toString();\r\n            history.push(\"?\" + insertQueryParam(\"id\", newrow));\r\n        }\r\n    }\r\n\r\n    function doUnsavedAlert() {\r\n        dispatch({\r\n            type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n            payload: true\r\n        });\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n                payload: false\r\n            });\r\n        }, 250);\r\n    }\r\n\r\n    function handleAddNew() {\r\n        if (state.isCurrentModified)\r\n            doUnsavedAlert();\r\n        else {\r\n            API.post(\"/destination\").then((response) => {\r\n                dispatch({\r\n                    type: \"UPDATE_DESTINATION\",\r\n                    payload: response.data.data\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleRemove() {\r\n        let res = window.confirm(\"Sunteți sigur că doriți să ștergeți acest destinatar?\\n\" + currentDest?.name);\r\n        if (!res)\r\n            return;\r\n        let formData = new FormData();\r\n        formData.append(\"_method\", \"delete\");\r\n        API.post(`/destination/${currentDest?._id}`, formData).then((response) => {\r\n            dispatch({\r\n                type: \"REMOVE_DESTINATION\",\r\n                payload: currentDest?._id ?? -1\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleUpdate(newSubject: {[key: string]: any}) {\r\n        // send api request and update in memory\r\n        let formData = new FormData();\r\n        let differences: string[] =\r\n            Object.keys(currentDest ?? {})\r\n            .filter((prop) => (currentDest as {[key: string]: any})[prop] !== newSubject[prop]);\r\n        for (let diff of differences) {\r\n            formData.append(diff, newSubject[diff] ?? \"\");\r\n        }\r\n        formData.append(\"_method\", \"patch\");\r\n        API.post(`/destination/${newSubject._id}`, formData).then((response) => {\r\n            // update in memory\r\n            dispatch({\r\n                type: \"UPDATE_DESTINATION\",\r\n                payload: newSubject as DestinationData\r\n            });\r\n            dispatch({\r\n                type: \"SET_IS_CURRENT_MODIFIED\",\r\n                payload: false\r\n            });\r\n        });\r\n    }\r\n\r\n    if (state.isLoading) {\r\n        return (\r\n            <span className=\"spinner spinner-border\"></span>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Prompt when={state.isCurrentModified} message={\"Aveți modificări nesalvate! Sunteți sigur că doriți să părăsiți pagina?\"}  />\r\n            <div className=\"row\">\r\n                <div className={currentDest ? \"col-md-8\" : \"col-12\"}>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <div className=\"mr-2\">\r\n                            <button className=\"btn btn-primary\" onClick={handleAddNew}>\r\n                                Adaugă destinatar\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"overflow-scroll\">\r\n                            <PaginationControl pages={totalPages} currentPage={currentPage}/>\r\n                        </div>\r\n                    </div>\r\n                    <table className=\"table table-bordered table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Nume</th>\r\n                                <th>Adresa</th>\r\n                                <th>Observații</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.destinations\r\n                            .sort((a, b) => a.name > b.name ? 1 : -1)\r\n                            .slice(state.entriesPerPage * currentPage, state.entriesPerPage * currentPage + state.entriesPerPage)\r\n                            .map((dest, index) => (\r\n                                <tr\r\n                                    onClick={() => handleSwitchRow(dest._id)}\r\n                                    className={classNames({\r\n                                        \"table-active\": dest._id === currentId && !state.isCurrentModified,\r\n                                        \"table-warning\": dest._id === currentId && state.isCurrentModified\r\n                                    })}\r\n                                    style={{cursor: \"pointer\"}}\r\n                                    key={objectHash(dest)}\r\n                                >\r\n                                    <td key={dest.name}>\r\n                                        <span className=\"badge badge-danger\">{currentPage * state.entriesPerPage + index+1}</span>\r\n                                        <span className=\"badge badge-info\">{dest._id}</span>\r\n                                        &nbsp;\r\n                                        {dest.name}\r\n                                    </td>\r\n                                    <td key={index+\"-1\"}>{destinationAddressToString(dest).split(\"\\n\").map(row => <>{row}<br /></>)}</td>\r\n                                    <td key={index+\"-2\"}>{dest.observations}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"overflow-scroll\">\r\n                        <PaginationControl pages={totalPages} currentPage={currentPage}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    { currentDest && <>\r\n                        <div className=\"card mb-2\">\r\n                            <div className=\"card-header\">\r\n                                <h5 className=\"card-title\">Opțiuni</h5>\r\n                            </div>\r\n                            <div className=\"card-body d-flex flex-column\">\r\n                                <Link\r\n                                    className=\"btn btn-primary btn-sm mb-2\"\r\n                                    to={\"/letters/group?id=\" + currentDest._id}\r\n                                >\r\n                                    Toate scrisorile destinatarului\r\n                                </Link>\r\n                                <button className=\"btn btn-outline-danger btn-sm\" onClick={handleRemove}>\r\n                                    Șterge destinatar\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <PropertyEditor\r\n                            subject={currentDest ?? {}}\r\n                            onSubmit={handleUpdate}\r\n                            onModify={(newVal, isOriginal) => {\r\n                                dispatch({\r\n                                    type: \"SET_IS_CURRENT_MODIFIED\",\r\n                                    payload: !isOriginal\r\n                                });\r\n                            }}\r\n                            isHighlighted={state.isPropertyEditorHighlighted}\r\n                            key={objectHash(currentDest)}\r\n                            translationTable={destinationTranslationTable()}\r\n                            orderTable={destinationOrderTable()}\r\n                        />\r\n                    </>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction stateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case \"SET_DESTINATIONS\":\r\n            return {\r\n                ...state,\r\n                destinations: action.payload\r\n            };\r\n        case \"UPDATE_DESTINATION\":\r\n            let newDests = [...state.destinations];\r\n            let index = newDests.findIndex(d => d._id === action.payload._id);\r\n            if (index !== -1) {\r\n                newDests[index] = action.payload;\r\n            } else {\r\n                newDests.push(action.payload);\r\n            }\r\n            return {\r\n                ...state,\r\n                destinations: newDests\r\n            };\r\n        case \"REMOVE_DESTINATION\":\r\n            return {\r\n                ...state,\r\n                destinations: state.destinations.filter(d => d._id !== action.payload)\r\n            };\r\n        case \"SET_IS_CURRENT_MODIFIED\":\r\n            return {\r\n                ...state,\r\n                isCurrentModified: action.payload\r\n            };\r\n        case \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\":\r\n            return {\r\n                ...state,\r\n                isPropertyEditorHighlighted: action.payload\r\n            };\r\n        default: throw new Error(\"Invalid action\");\r\n    }\r\n}\r\n\r\nexport default DestinationsPage;","import { Button } from \"react-bootstrap\";\r\nimport API from \"./api\";\r\n\r\nfunction GeneralPage(props: {\r\n    onLogout: (reason?: string) => void\r\n}) {\r\n    return (\r\n        <>\r\n            <p>Bine ați venit în Managerul de Poștă Fizică!</p>\r\n            <p>\r\n                Acesta reprezintă proiectul lui Pricop Laurențiu pentru Atestatul de sfârșit de clasa a XII-a. Însă, am dorit să fac această aplicație capabilă\r\n                de a fi hostată public, și probabil va primi actualizări de-a lungul timpului!\r\n            </p>\r\n            <p>Versiunea aplicației: v1.0</p>\r\n            <Button variant=\"secondary\" onClick={logout}>\r\n                Deautentificare\r\n            </Button>\r\n        </>\r\n    );\r\n\r\n    function logout() {\r\n        API.post(\"/logout\").then(() => {\r\n            props.onLogout(\"user-initiated\");\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default GeneralPage;","import React from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DestinationData, LetterData, LetterType } from \"../apiTypes\";\r\n\r\n\r\nexport default function LettersCategorizedSubpage(props: {\r\n    destinations: DestinationData[];\r\n    letters: LetterData[];\r\n    onAddNew: (type: LetterType, destId: number) => void;\r\n    onModify: (newSubject: {[key: string]: string}, currentLetter: LetterData) => Promise<void>;\r\n    onRemove: (letterData: LetterData) => void;\r\n}) {\r\n\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    const currentId = query.get(\"id\") ? parseInt(query.get(\"id\") ?? \"0\") : null;\r\n\r\n    return (\r\n        <>\r\n            { props.destinations\r\n            .filter(dest => props.letters.map(lett => lett.destinationId).includes(dest._id))\r\n            .sort((a, b) => a.name > b.name ? 1 : -1)\r\n            .map((destination, index) => {\r\n                const letters = props.letters.filter(lett => lett.destinationId === destination._id);\r\n                const incomingLetters = letters.filter(lett => lett.type === \"incoming\");\r\n                const outgoingLetters = letters.filter(lett => lett.type === \"outgoing\");\r\n                return <>\r\n                    <div className=\"card mb-3\">\r\n                        <div className=\"card-header position-relative\">\r\n                            <h5 className=\"card-title d-inline\" id={\"id_\" + destination._id}>\r\n                                <span className=\"badge badge-danger\">{index+1}</span>\r\n                                <span className=\"badge badge-info mr-2\">{destination._id}</span>\r\n                                {destination.name}\r\n                                <span className=\"badge badge-info ml-2\">{letters.length} scrisori</span>\r\n                            </h5>\r\n                            { currentId === destination._id ?\r\n                                <Link className=\"btn btn-primary float-right stretched-link\" to=\"?id=null\">\r\n                                    Ascunde\r\n                                </Link>\r\n                                :\r\n                                <Link className=\"btn btn-primary float-right stretched-link\" to={\"?id=\" + destination._id}>\r\n                                    Arată\r\n                                </Link>\r\n                            }\r\n                        </div>\r\n                        { currentId === destination._id &&\r\n                        <div className=\"card-body\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md\">\r\n                                    <h5>Primite</h5>\r\n                                    <table className=\"table table-striped table-bordered table-hover table-sm table-responsive-md\">\r\n                                        <thead><tr>\r\n                                            <th>Cod</th>\r\n                                            <th>Primită la</th>\r\n                                            <th>De mână?</th>\r\n                                            <th>Observații</th>\r\n                                        </tr></thead>\r\n                                        <tbody>\r\n                                        { incomingLetters.map((letter, index) => (\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <span className=\"badge badge-danger\">{index+1}</span>\r\n                                                    <span className=\"badge badge-info mr-2\">{letter._id}</span>\r\n                                                    <Link to={\"/letters/all?id=\"+letter._id}>\r\n                                                        {letter.code}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>{letter.receivedDate}</td>\r\n                                                <td>{letter.handwritten}</td>\r\n                                                <td>{letter.observations}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        { incomingLetters.length === 0 &&\r\n                                        <tr>\r\n                                            <td>Nu sunt scrisori.</td>\r\n                                        </tr>\r\n                                        }\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                                <div className=\"col-md\">\r\n                                    <h5>Trimise</h5>\r\n                                    <table className=\"table table-striped table-bordered table-hover table-sm table-responsive-md\">\r\n                                        <thead><tr>\r\n                                            <th>Cod</th>\r\n                                            <th>Traseu</th>\r\n                                            <th>De mână?</th>\r\n                                            <th>Observații</th>\r\n                                        </tr></thead>\r\n                                        <tbody>\r\n                                        { outgoingLetters.map((letter, index) => (\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <span className=\"badge badge-danger\">{index+1}</span>\r\n                                                    <span className=\"badge badge-info mr-2\">{letter._id}</span>\r\n                                                    <Link to={\"/letters/all?id=\"+letter._id}>\r\n                                                        {letter.code}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>\r\n                                                    { letter.writtenDate && <>Scrisă: {letter.writtenDate}<br /></> }\r\n                                                    { letter.sentDate && <>Trimisă: {letter.sentDate}<br /></> }\r\n                                                    { letter.receivedDate && <>Primită: {letter.receivedDate}<br /></> }\r\n                                                </td>\r\n                                                <td>{letter.handwritten}</td>\r\n                                                <td>{letter.observations}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        { outgoingLetters.length === 0 &&\r\n                                        <tr>\r\n                                            <td>Nu sunt scrisori.</td>\r\n                                        </tr>\r\n                                        }\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </>;\r\n            })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n","import { FormEvent, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { DestinationData, LetterType } from \"../apiTypes\";\r\n\r\nexport default function NewLetterModal(props: {\r\n    show: boolean;\r\n    onHide: () => void;\r\n    onSubmit: (type: LetterType, destinationId: number) => void;\r\n    destinations: DestinationData[]\r\n}) {\r\n    let [letterType, setLetterType] = useState<LetterType>(\"incoming\");\r\n    let [destination, setDestination] = useState<number>(-1);\r\n\r\n    function isValid() {\r\n        return destination !== -1;\r\n    }\r\n\r\n    function handleSubmit(ev: FormEvent) {\r\n        ev.preventDefault();\r\n        props.onSubmit(letterType, destination);\r\n    }\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.onHide}>\r\n            <form onSubmit={handleSubmit}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Adaugă scrisoare nouă</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <>\r\n                        <div className=\"form-group\">\r\n                            <label>Tip scrisoare:</label>\r\n                            <select className=\"form-control\" value={letterType} onChange={ev => setLetterType(ev.target.value as LetterType)}>\r\n                                <option value=\"incoming\">Primită</option>\r\n                                <option value=\"outgoing\">Trimisă</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>{letterType === \"incoming\" ? \"Expeditor:\" : \"Destinatar:\"}</label>\r\n                            <select className=\"form-control\" value={destination ?? 0} onChange={ev => setDestination(parseInt(ev.target.value))}>\r\n                                <option value={-1} key={-1} disabled={true}>Selectează...</option>\r\n                                {props.destinations.map(dest => (\r\n                                    <option value={dest._id} key={dest._id}>\r\n                                        {dest.name}, {dest.street} {dest.number}, {dest.locality} {dest.commune} {dest.postalCode}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <p>Acestea reprezintă datele necesare pentru crearea unei scrisori. Celelalte date pot fi adăugate ulterior.</p>\r\n                    </>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <button className=\"btn btn-outline-primary\" type=\"button\" onClick={props.onHide}>Anulează</button>\r\n                    <button className=\"btn btn-primary\" type=\"submit\" disabled={!isValid()}>Adaugă</button>\r\n                </Modal.Footer>\r\n            </form>\r\n        </Modal>\r\n    );\r\n}","import classNames from \"classnames\";\r\nimport objectHash from \"object-hash\";\r\nimport { useReducer } from \"react\";\r\nimport { Prompt, useHistory, useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DestinationData, LetterData, LetterType } from \"../apiTypes\";\r\nimport PaginationControl from \"../PaginationControl\";\r\nimport ProperyEditor from \"../PropertyEditor\";\r\nimport { insertQueryParam, letterTranslationTable } from \"../utilities\";\r\nimport NewLetterModal from \"./NewLetterModal\";\r\n\r\ntype State = {\r\n    entriesPerPage: number;\r\n    isAddNewModalShown: boolean;\r\n    isCurrentModified: boolean;\r\n    isPropertyEditorHighlighted: boolean;\r\n};\r\ntype Action = \r\n  | { type: \"SET_ADD_NEW_MODAL_SHOWN\", payload: boolean }\r\n  | { type: \"SET_IS_CURRENT_MODIFIED\", payload: boolean }\r\n  | { type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\", payload: boolean }\r\n\r\nexport default function LettersTableSubpage(props: {\r\n    destinations: DestinationData[];\r\n    letters: LetterData[];\r\n    onAddNew: (type: LetterType, destId: number) => void;\r\n    onModify: (newSubject: {[key: string]: string}, currentLetter: LetterData) => Promise<void>;\r\n    onRemove: (letterData: LetterData) => void;\r\n}) {\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    const currentPage = parseInt(query.get(\"p\") ?? \"0\");\r\n    // const currentRow = query.get(\"r\") ? parseInt(query.get(\"r\") ?? \"0\") : null;\r\n    const currentId = query.get(\"id\") ? parseInt(query.get(\"id\") ?? \"0\") : null;\r\n    const [state, dispatch] = useReducer(stateReducer, {\r\n        entriesPerPage: 10,\r\n        isAddNewModalShown: false,\r\n        isCurrentModified: false,\r\n        isPropertyEditorHighlighted: false\r\n    });\r\n    const history = useHistory();\r\n    const destinationFilter = parseInt(query.get(\"d\") ?? \"-1\");\r\n    const typeFilter = (query.get(\"t\") !== \"null\" ? (query.get(\"t\") ?? null) : null);\r\n    const filteredLetters = props.letters.filter(lett => {\r\n        let res = true;\r\n        if (typeFilter !== null)\r\n            res = res && lett.type === typeFilter;\r\n        if (destinationFilter !== -1)\r\n            res = res && lett.destinationId === destinationFilter;\r\n        return res;\r\n    });\r\n    const totalPages = \r\n        Math.floor(filteredLetters.length / state.entriesPerPage) +\r\n        (filteredLetters.length % state.entriesPerPage !== 0 ? 1 : 0);\r\n    const currentLetter = filteredLetters.find(lett => lett._id === currentId) ?? null;\r\n\r\n    function handleAddNew(type: LetterType, destId: number) {\r\n        handleAddNewModalVisibility(false);\r\n        props.onAddNew(type, destId);\r\n    }\r\n\r\n    function handleAddNewModalVisibility(newVis: boolean) {\r\n        dispatch({\r\n            type: \"SET_ADD_NEW_MODAL_SHOWN\",\r\n            payload: newVis\r\n        });\r\n    }\r\n\r\n    function handleSwitchRow(newId: number) {\r\n        let id: string;\r\n        if (state.isCurrentModified) {\r\n            dispatch({\r\n                type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n                payload: true\r\n            });\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n                    payload: false\r\n                });\r\n            }, 500);\r\n            return;\r\n        }\r\n        if (currentId === newId)\r\n            id = \"null\";\r\n        else id = newId.toString();\r\n        history.push(\"?\" + insertQueryParam(\"id\", id));\r\n    }\r\n\r\n    function handleSubmit(newSubject: {[key: string]: any}) {\r\n        if (!currentLetter)\r\n            return;\r\n        props.onModify(newSubject, currentLetter).then(() => {\r\n            dispatch({\r\n                type: \"SET_IS_CURRENT_MODIFIED\",\r\n                payload: false\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleRemove() {\r\n        currentLetter && props.onRemove(currentLetter);\r\n    }\r\n\r\n    function retrieveDest(destId: number) {\r\n        return props.destinations.find(dest => dest._id === destId);\r\n    }\r\n\r\n    // if (isLoading) {\r\n    //     return <span className=\"spinner-border\" />;\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <Prompt when={state.isCurrentModified} message={\"Aveți modificări nesalvate! Sunteți sigur că doriți să părăsiți pagina?\"} />\r\n            <NewLetterModal\r\n                destinations={props.destinations}\r\n                show={state.isAddNewModalShown}\r\n                onHide={() => handleAddNewModalVisibility(false)}\r\n                onSubmit={handleAddNew}\r\n            />\r\n            <div className=\"row\">\r\n                <div className={classNames({\"col-md-8\": currentLetter, \"col-md-12\": !currentLetter})}>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <div className=\"mr-2\">\r\n                            <button className=\"btn btn-primary\" onClick={() => handleAddNewModalVisibility(true)}>\r\n                                Adaugă scrisoare\r\n                            </button>\r\n                        </div>\r\n                        <PaginationControl pages={totalPages} />\r\n                    </div>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <div className=\"btn-group mr-2\">\r\n                            <button className={classNames({\r\n                                \"btn\": true,\r\n                                \"btn-outline-primary\": typeFilter !== \"incoming\",\r\n                                \"btn-primary\": typeFilter === \"incoming\"\r\n                            })} onClick={() => {\r\n                                if (typeFilter === \"incoming\")\r\n                                    history.push(\"?\" + insertQueryParam(\"t\", \"null\"));\r\n                                else history.push(\"?\" + insertQueryParam(\"t\", \"incoming\"));\r\n                            }}>\r\n                                Numai primite\r\n                            </button>\r\n                            <button className={classNames({\r\n                                \"btn\": true,\r\n                                \"btn-outline-primary\": typeFilter !== \"outgoing\",\r\n                                \"btn-primary\": typeFilter === \"outgoing\"\r\n                            })} onClick={() => {\r\n                                if (typeFilter === \"outgoing\")\r\n                                    history.push(\"?\" + insertQueryParam(\"t\", \"null\"));\r\n                                else history.push(\"?\" + insertQueryParam(\"t\", \"outgoing\"));\r\n                            }}>\r\n                                Numai trimise\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"form-group m-0\">\r\n                            <select\r\n                                className=\"form-control\"\r\n                                value={destinationFilter}\r\n                                onChange={(ev) => {\r\n                                    history.push(\"?\" + insertQueryParam(\"d\", ev.target.value));\r\n                                }}\r\n                            >\r\n                                <option value={-1} key={-1}>Toți destinatarii</option>\r\n                                {props.destinations\r\n                                .filter(dest => props.letters.map(lett => lett.destinationId).includes(dest._id))\r\n                                .map(dest => (\r\n                                    <option value={dest._id} key={dest._id}>Numai {dest.name}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <table className={classNames({\r\n                        \"table table-bordered table-hover table-responsive-md\": true,\r\n                        \"d-none d-md-table\": currentLetter\r\n                    })}>\r\n                        <thead><tr>\r\n                            <th>Cod</th>\r\n                            <th>Pentru/De la</th>\r\n                            <th>Tip</th>\r\n                            <th>Detalii</th>\r\n                            <th>Observații</th>\r\n                            {!currentLetter && <th>Opțiuni</th>}\r\n                        </tr></thead>\r\n                        <tbody>\r\n                            {filteredLetters\r\n                            .slice(state.entriesPerPage * currentPage, state.entriesPerPage * currentPage + state.entriesPerPage)\r\n                            .map((letter, index) => (\r\n                                <tr\r\n                                    key={letter._id}\r\n                                    className={classNames({\r\n                                        \"table-active\": currentId === letter._id && !state.isCurrentModified,\r\n                                        \"table-warning\": currentId === letter._id && state.isCurrentModified\r\n                                    })}\r\n                                >\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        <span className=\"badge badge-danger\">{currentPage * state.entriesPerPage + index+1}</span>\r\n                                        <span className=\"badge badge-info\">{letter._id}</span>\r\n                                        &nbsp;\r\n                                        {letter.code}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        {/* <Link to={\"/destinations?id=\" + retrieveDest(letter.destinationId)?._id}> */}\r\n                                            {retrieveDest(letter.destinationId)?.name}\r\n                                        {/* </Link> */}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        {letter.type === \"incoming\" ? \"Primită\" : \"Trimisă\"}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        {letter.handwritten && <>De mână: {letter.handwritten}<br /></>}\r\n                                        {letter.type === \"outgoing\" && <>\r\n                                            {letter.writtenDate && <>Scrisă: {letter.writtenDate}<br /></>}\r\n                                            {letter.sentDate && <>Trimisă: {letter.sentDate}<br /></>}\r\n                                        </>}\r\n                                        {letter.receivedDate && <>Primită: {letter.receivedDate}<br /></>}\r\n                                        {letter.price && <>Preț: {letter.price}</>}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >{letter.observations}</td>\r\n                                    { !currentLetter &&\r\n                                    <td>\r\n                                        <Link\r\n                                            className=\"btn btn-primary btn-sm mb-2 mr-2\"\r\n                                            to={\"/letters/group?id=\" + retrieveDest(letter.destinationId)?._id + \"#id_\" + retrieveDest(letter.destinationId)?._id}>\r\n                                            Toate scrisorile\r\n                                        </Link>\r\n                                        <Link\r\n                                            className=\"btn btn-primary btn-sm mb-2 mr-2\"\r\n                                            to={\"/destinations?toid=\" + retrieveDest(letter.destinationId)?._id}>\r\n                                            Detalii destinatar\r\n                                        </Link>\r\n                                    </td>\r\n                                    }\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <PaginationControl pages={totalPages} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    { currentLetter && <>\r\n                    <div className=\"card mb-2 d-md-none\">\r\n                        <div className=\"card-header\">\r\n                            <h5 className=\"card-title\">\r\n                                Scrisoarea curentă\r\n                            </h5>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            {currentLetter.type === \"incoming\" ? \"Expeditor\" : \"Destinatar\"}:&nbsp;\r\n                            {retrieveDest(currentLetter.destinationId)?.name}<br />\r\n                            Tip: {currentLetter.type === \"incoming\" ? \"Primită\" : \"Trimisă\"}\r\n                            <button\r\n                                className=\"btn btn-primary btn-block\"\r\n                                onClick={() => {\r\n                                    history.push(\"?\" + insertQueryParam(\"id\", \"null\"));\r\n                                }}\r\n                            >\r\n                                Înapoi la lista scrisorilor\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card mb-2\">\r\n                        <div className=\"card-header\">\r\n                            <h5 className=\"card-title\">Opțiuni</h5>\r\n                        </div>\r\n                        <div className=\"card-body d-flex flex-column\">\r\n                            <Link\r\n                                className=\"btn btn-primary btn-sm mb-2\"\r\n                                to={\"/letters/group?id=\" + retrieveDest(currentLetter.destinationId)?._id + \"#id_\" + retrieveDest(currentLetter.destinationId)?._id}>\r\n                                Toate scrisorile destinatarului\r\n                            </Link>\r\n                            <Link\r\n                                className=\"btn btn-primary btn-sm mb-2\"\r\n                                to={\"/destinations?toid=\" + retrieveDest(currentLetter.destinationId)?._id}>\r\n                                Detalii destinatar\r\n                            </Link>\r\n                            <button\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                                onClick={handleRemove}\r\n                            >\r\n                                Șterge scrisoare\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <ProperyEditor\r\n                        subject={currentLetter}\r\n                        onModify={(newObj, isOriginal) => {\r\n                            dispatch({\r\n                                type: \"SET_IS_CURRENT_MODIFIED\",\r\n                                payload: !isOriginal\r\n                            });\r\n                        }}\r\n                        onSubmit={handleSubmit}\r\n                        translationTable={letterTranslationTable()}\r\n                        isHighlighted={state.isPropertyEditorHighlighted}\r\n                        key={objectHash(currentLetter)}\r\n                    />\r\n                    </>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction stateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case \"SET_ADD_NEW_MODAL_SHOWN\":\r\n            return {\r\n                ...state,\r\n                isAddNewModalShown: action.payload\r\n            };\r\n        case \"SET_IS_CURRENT_MODIFIED\":\r\n            return {\r\n                ...state,\r\n                isCurrentModified: action.payload\r\n            };\r\n        case \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\":\r\n            return {\r\n                ...state,\r\n                isPropertyEditorHighlighted: action.payload\r\n            };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}","import classNames from \"classnames\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport { Link, Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport API from \"../api\";\r\nimport { DestinationData, LetterData, LetterType } from \"../apiTypes\";\r\nimport { formData } from \"../utilities\";\r\nimport LettersCategorizedSubpage from \"./LettersCategorizedSubpage\";\r\nimport LettersTableSubpage from \"./LettersTableSubpage\";\r\n\r\ninterface State {\r\n    isLoading: boolean;\r\n    letters: LetterData[];\r\n    destinations: DestinationData[];\r\n}\r\n\r\ntype Action =\r\n    | { type: \"SET_LOADING\"; payload: boolean; }\r\n    | { type: \"PUSH_LETTERS\", payload: LetterData[] }\r\n    | { type: \"PUSH_DESTINATIONS\", payload: DestinationData[] }\r\n    | { type: \"REMOVE_LETTERS\", payload: LetterData[] }\r\n    | { type: \"REMOVE_LETTER_ID\", payload: number };\r\n\r\n    \r\nexport default function LettersPageRouter() {\r\n    let match = useRouteMatch();\r\n    let [state, dispatch] = useReducer(stateReducer, {\r\n        isLoading: true,\r\n        letters: [],\r\n        destinations: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            API.get(\"/letters\").then(response => {\r\n                const letters = response.data.letters as LetterData[];\r\n                dispatch({\r\n                    type: \"PUSH_LETTERS\",\r\n                    payload: letters\r\n                });\r\n            }),\r\n            API.get(\"/destinations\").then(response => {\r\n                const dests = response.data.data as DestinationData[];\r\n                dispatch({\r\n                    type: \"PUSH_DESTINATIONS\",\r\n                    payload: dests.sort((a, b) => a.name > b.name ? 1 : -1)\r\n                });\r\n            })\r\n        ]).then(() => {\r\n            dispatch({\r\n                type: \"SET_LOADING\",\r\n                payload: false\r\n            })\r\n        });\r\n    }, []);\r\n\r\n    function handleAddNew(type: LetterType, destId: number) {\r\n        Promise.all([\r\n            API.post(\"/letter\", formData({\r\n                type,\r\n                destinationId: destId\r\n            })),\r\n            (state.destinations.map(dest => dest._id).includes(destId)) ? undefined :\r\n            API.get(\"/destination/\" + destId).then(response => {\r\n                dispatch({\r\n                    type: \"PUSH_DESTINATIONS\",\r\n                    payload: [response.data.data]\r\n                });\r\n            })\r\n        ]).then(result => {\r\n            dispatch({\r\n                type: \"PUSH_LETTERS\",\r\n                payload: [result[0].data.letter]\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleModify(newSubject: {[key: string]: any}, currentLetter: LetterData) {\r\n        let newLetter = newSubject as LetterData;\r\n        // send patch request then update DOM\r\n        let formData = new FormData();\r\n        let differences: string[] =\r\n            Object.keys(currentLetter ?? {})\r\n            .filter((prop) => (currentLetter as {[key: string]: any})[prop] !== newSubject[prop]);\r\n        for (let diff of differences) {\r\n            formData.append(diff, newSubject[diff] ?? \"\");\r\n        }\r\n        formData.append(\"_method\", \"patch\");\r\n        return API.post(\"/letter/\" + newLetter._id, formData)\r\n        .then(response => {\r\n            dispatch({\r\n                type: \"PUSH_LETTERS\",\r\n                payload: [response.data.letter]\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleRemove(currentLetter: LetterData) {\r\n        if (!window.confirm(\"Sunteți sigur că doriți să ștergeți scrisoarea?\\nNumele: \" + retrieveDest(currentLetter?.destinationId ?? -1)?.name))\r\n            return;\r\n        API.post(\"/letter/\" + currentLetter?._id, formData({\r\n            _method: \"delete\"\r\n        })).then(response => {\r\n            dispatch({\r\n                type: \"REMOVE_LETTER_ID\",\r\n                payload: response.data.letter._id\r\n            });\r\n        });\r\n    }\r\n\r\n    function retrieveDest(destId: number) {\r\n        return state.destinations.find(dest => dest._id === destId);\r\n    }\r\n\r\n    if (state.isLoading) {\r\n        return <>\r\n            <span className=\"spinner-border\"></span>\r\n        </>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ul className=\"nav nav-pills mb-2\">\r\n                <li className=\"nav-item\">\r\n                    <ActivablePill text=\"Toate\" to={`${match.url}/all`} />\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <ActivablePill text=\"Grupate\" to={`${match.url}/group`} />\r\n                </li>\r\n            </ul>\r\n            <Switch>\r\n                <Route path={match.url} exact>\r\n                    <Redirect to={`${match.url}/all`} />\r\n                </Route>\r\n                <Route path={`${match.url}/all`}>\r\n                    <LettersTableSubpage\r\n                        letters={state.letters}\r\n                        destinations={state.destinations}\r\n                        onAddNew={handleAddNew}\r\n                        onModify={handleModify}\r\n                        onRemove={handleRemove}\r\n                    />\r\n                </Route>\r\n                <Route path={`${match.url}/group`}>\r\n                    <LettersCategorizedSubpage\r\n                        letters={state.letters}\r\n                        destinations={state.destinations}\r\n                        onAddNew={handleAddNew}\r\n                        onModify={handleModify}\r\n                        onRemove={handleRemove}\r\n                    />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction ActivablePill(props: {\r\n    text: string;\r\n    to: string;\r\n    activeOnlyWhenExact?: boolean;\r\n}) {\r\n    let match = useRouteMatch({\r\n        path: props.to,\r\n        exact: props.activeOnlyWhenExact\r\n    });\r\n    return (\r\n        <Link to={props.to} className={classNames({\"nav-link\": true, \"active\": match})}>\r\n            {props.text}\r\n        </Link>\r\n    );\r\n}\r\n\r\nfunction stateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case \"PUSH_LETTERS\": {\r\n            let newLetts = [...state.letters];\r\n            [...action.payload].forEach(letter => {\r\n                let index = state.letters.findIndex(lett => lett._id === letter._id);\r\n                if (index === -1)\r\n                    newLetts.push(letter);\r\n                else newLetts[index] = letter;\r\n            });\r\n            newLetts.sort((a, b) => (\r\n                -(a.timestamp !== b.timestamp ?\r\n                    a.timestamp - b.timestamp :\r\n                    a._id - b._id)\r\n            ));\r\n            return {\r\n                ...state,\r\n                letters: newLetts\r\n            };\r\n        }\r\n        case \"PUSH_DESTINATIONS\": {\r\n            let newDests = [...state.destinations];\r\n            [...action.payload].forEach(destination => {\r\n                let index = state.destinations.findIndex(dest => dest._id === destination._id);\r\n                if (index === -1)\r\n                    newDests.push(destination);\r\n                else newDests[index] = destination;\r\n            });\r\n            return {\r\n                ...state,\r\n                destinations: newDests\r\n            };\r\n        }\r\n        case \"REMOVE_LETTER_ID\":\r\n            let newLetts = [...state.letters];\r\n            newLetts = newLetts.filter(lett => lett._id !== action.payload);\r\n            return {\r\n                ...state,\r\n                letters: newLetts\r\n            };\r\n        default: throw new Error();\r\n    }\r\n}","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { Link, Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport { UserData } from \"./apiTypes\";\r\nimport DestinationsPage from \"./DestinationsPage\";\r\nimport GeneralPage from \"./GeneralPage\";\r\nimport LettersPageRouter from \"./letters/LettersPageRouter\";\r\n\r\nfunction Panel(props: {\r\n    user: UserData,\r\n    onLogout: (reason?: string) => void\r\n}) {\r\n    return (\r\n        <>\r\n            <Nav variant=\"tabs\" className=\"\">\r\n                <Nav.Item>\r\n                    <CustomNavLink label=\"General\" to=\"/general\" />\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <CustomNavLink label=\"Destinatari\" to=\"/destinations\" />\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <CustomNavLink label=\"Scrisori\" to=\"/letters\" />\r\n                </Nav.Item>\r\n            </Nav>\r\n            <div className=\"border-right border-left border-bottom p-2\">\r\n                <Switch>\r\n                        <Route path=\"/general\">\r\n                            <GeneralPage onLogout={props.onLogout}/>\r\n                        </Route>\r\n                        <Route path=\"/destinations\">\r\n                            <DestinationsPage />\r\n                        </Route>\r\n                        <Route path=\"/letters\">\r\n                            <LettersPageRouter />\r\n                        </Route>\r\n                        <Route>\r\n                            <Redirect to=\"/general\" />\r\n                        </Route>\r\n                </Switch>\r\n            </div>\r\n            <div className=\"float-right border border-top-0 px-2 py-0 text-muted\">\r\n                <small>Platformă de Pricop Laurențiu</small>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CustomNavLink({label, to, activeOnlyWhenExact}: {\r\n    label: string,\r\n    to: string,\r\n    activeOnlyWhenExact?: boolean\r\n}) {\r\n    let match = useRouteMatch({\r\n      path: to,\r\n      exact: activeOnlyWhenExact\r\n    });\r\n    return (\r\n        <li className=\"nav-item\">\r\n            <Link className={classNames({\r\n                \"nav-link\": true,\r\n                \"active\": match\r\n            })} to={to}>{label}</Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Panel;","import { AxiosError } from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport API from './api';\nimport { UserData } from './apiTypes';\nimport LoginForm from './login/LoginForm';\nimport RegisterForm from './login/RegisterForm';\nimport Panel from './Panel';\n\nfunction App() {\n\tlet [currentUser, setCurrentUser] = useState<UserData | null>(null);\n\tlet [isInitializing, setIsInitializing] = useState(true);\n\tlet [error, setError] = useState<string | null>(null);\n\tlet [currentPage, setCurrentPage] = useState<\"login\" | \"register\">(\"login\");\n\tlet [darkMode, setDarkMode] = useState(() => {\n\t\tlet hourNow = new Date().getHours();\n\t\treturn !(hourNow >= 7 && hourNow <= 18);\n\t});\n\tuseEffect(() => {\n\t\t// styleModeSwitch(darkMode);\n\t\t// this will most probably fail, but if it doesn't, it means\n\t\t//  the user is logged in (session cookie is still valid) so\n\t\t//  go ahead and automatically log them in\n\t\tAPI.get(\"/user\").then((response) => {\n\t\t\tsetCurrentUser(response.data.data);\n\t\t\tsetIsInitializing(false);\n\t\t}).catch((reason: AxiosError) => {\n\t\t\tlet data = reason.response?.data;\n\t\t\tif (data && (data.status !== \"access-denied\" || data.reason !== \"not-logged-in\")) {\n\t\t\t\tsetError(\"Nu se poate comunica cu serverul, acesta a returnat o eroare.\");\n\t\t\t} else setIsInitializing(false);\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tstyleModeSwitch();\n\t\tfunction styleModeSwitch() {\n\t\t\tlet elem = document.getElementById(\"stylesheetLink\");\n\t\t\tif (!elem) {\n\t\t\t\talert(\"Nu s-a găsit elementul <link> necesar. Nu se poate continua.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet prefix = elem.getAttribute(\"data-prefix\") ?? \"\";\n\t\t\tif (!darkMode) {\n\t\t\t\t// switch to light mode\n\t\t\t\telem.setAttribute(\"href\", prefix + \"/style/bootstrap.united.min.css\");\n\t\t\t} else {\n\t\t\t\t// switch to dark mode\n\t\t\t\telem.setAttribute(\"href\", prefix + \"/style/bootstrap.superhero.min.css\");\n\t\t\t}\n\t\t}\n\t}, [darkMode]);\n\n\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<div className=\"container py-3 px-md-0 px-1\">\n\t\t\t\t<div className=\"clearfix mb-2 mx-2 mx-md-0\">\n\t\t\t\t\t<h1 className=\"d-inline\">Manager Poștă Fizică</h1>\n\t\t\t\t\t<button className=\"btn btn-outline-primary float-right btn-sm\" onClick={() => setDarkMode(!darkMode)}>\n\t\t\t\t\t\t{darkMode && \"Mod întunecat\"}\n\t\t\t\t\t\t{!darkMode && \"Mod luminos\"}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"d-md-none alert alert-warning\">\n\t\t\t\t\tFolosiți un dispozitiv mobil. Această aplicație web nu este (încă) optimizată pentru o experiență mobilă,\n\t\t\t\t\tdar puteți continua.\n\t\t\t\t</div>\n\t\t\t\t{ error && <div className=\"alert alert-danger\">{error}</div>}\n\n\t\t\t\t{isInitializing && <span className=\"spinner-border border-secondary\" />}\n\n\t\t\t\t{!currentUser &&\n\t\t\t\t!isInitializing &&\n\t\t\t\tcurrentPage === \"login\" &&\n\t\t\t\t\t<LoginForm\n\t\t\t\t\t\tonLogin={setCurrentUser}\n\t\t\t\t\t\tonPageSwitch={() => { setCurrentPage(\"register\") }}\n\t\t\t\t\t/>\n\t\t\t\t}\n\n\t\t\t\t{!currentUser && !isInitializing && currentPage === \"register\" && <RegisterForm onPageSwitch={() => { setCurrentPage(\"login\") }} />}\n\n\t\t\t\t{currentUser && !isInitializing &&\n\t\t\t\t\t<Panel\n\t\t\t\t\t\tuser={currentUser}\n\t\t\t\t\t\tonLogout={(reason) => {\n\t\t\t\t\t\t\tsetCurrentUser(null);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t</BrowserRouter>\n\t);\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// import 'bootstrap/dist/css/bootstrap.css';\n// import \"./style/bootstrap.superhero.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
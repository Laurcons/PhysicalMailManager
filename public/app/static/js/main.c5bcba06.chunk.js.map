{"version":3,"sources":["api.ts","login/LoginForm.tsx","login/RegisterForm.tsx","utilities.ts","PaginationControl.tsx","PropertyEditor.tsx","DestinationsPage.tsx","GeneralPage.tsx","letters/LettersCategorizedSubpage.tsx","letters/NewLetterModal.tsx","letters/LettersTableSubpage.tsx","letters/LettersPageRouter.tsx","Panel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API","axiosStatic","create","baseURL","withCredentials","LoginForm","props","useState","username","setUsername","password","setPassword","isLoading","setIsLoading","error","setError","onSubmit","e","preventDefault","formData","FormData","append","post","then","get","response","onLogin","data","catch","reason","status","finally","style","maxWidth","className","type","onChange","ev","target","value","onClick","onPageSwitch","RegisterForm","confirmPassword","setConfirmPassword","success","setSuccess","trim","length","Spinner","animation","size","variant","destinationAddressToString","d","parts","part","street","push","number","block","stair","apartment","locality","commune","county","postalCode","filter","map","join","fields","fd","Object","keys","forEach","field","composeNewQuery","params","currentParams","document","location","search","substr","split","p","reduce","prev","curr","assign","key","undefined","PaginationControl","query","URLSearchParams","useLocation","currentPage","parseInt","Array","pages","fill","val","index","classNames","to","toString","ProperyEditor","subject","newSubject","setNewSubject","modified","setModified","modifySubject","copy","some","prop","onModify","differences","children","sort","a","b","orderTable","findIndex","x","translationTable","includes","classnames","isHighlighted","handleModify","stateReducer","state","action","payload","destinations","newDests","_id","isCurrentModified","isPropertyEditorHighlighted","Error","DestinationsPage","history","useHistory","useReducer","entriesPerPage","dispatch","totalPages","Math","floor","toId","currentId","currentDest","find","dest","useEffect","pageNum","handleSwitchRow","id","doUnsavedAlert","newrow","setTimeout","when","message","name","slice","cursor","row","observations","objectHash","window","confirm","diff","newVal","isOriginal","GeneralPage","changelogShow","setChangelogShow","Button","onLogout","Modal","show","onHide","scrollable","Header","closeButton","Title","Body","Footer","LettersCategorizedSubpage","validDestinations","letters","lett","destinationId","getElementById","scrollIntoView","behavior","destination","incomingLetters","outgoingLetters","letter","code","receivedDate","handwritten","colSpan","writtenDate","sentDate","NewLetterModal","letterType","setLetterType","setDestination","disabled","LettersTableSubpage","isAddNewModalShown","destinationFilter","typeFilter","filteredLetters","res","currentLetter","l","toid","handleAddNewModalVisibility","newVis","newId","retrieveDest","destId","onAddNew","t","price","onRemove","newObj","LettersPageRouter","match","useRouteMatch","handleAddNew","Promise","all","result","newLetter","handleRemove","_method","dests","ActivablePill","text","icon","url","path","exact","activeOnlyWhenExact","newLetts","timestamp","CustomNavLink","label","Panel","Nav","Item","App","currentUser","setCurrentUser","isInitializing","setIsInitializing","setCurrentPage","hourNow","Date","getHours","darkMode","setDarkMode","elem","alert","prefix","getAttribute","setAttribute","styleModeSwitch","user","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uKAQeA,E,OALHC,EAAYC,OAAO,CAC3BC,QAAS,iCACTC,iBAAiB,I,OCCN,SAASC,EAAUC,GAG9B,IAAD,EAC4BC,mBAAS,IADrC,mBACGC,EADH,KACaC,EADb,OAE4BF,mBAAS,IAFrC,mBAEGG,EAFH,KAEaC,EAFb,OAG8BJ,oBAAS,GAHvC,mBAGGK,EAHH,KAGcC,EAHd,OAIsBN,mBAAwB,MAJ9C,mBAIGO,EAJH,KAIUC,EAJV,KAgCF,OACC,uBAAMC,SA3BS,SAACC,GAChBA,EAAEC,iBAEF,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,WAAYb,GAC5BW,EAASE,OAAO,WAAYX,GAC5BG,GAAa,GACbE,EAAS,MACTf,EAAIsB,KAAK,SAAUH,GAAUI,MAAK,WACjC,OAAOvB,EAAIwB,IAAI,SAASD,MAAK,SAACE,GAC7BnB,EAAMoB,QAAQD,EAASE,KAAKA,YAE3BC,OAAM,SAACC,GAAwB,IAAD,IAChC,iBAAQA,EAAOJ,gBAAf,aAAQ,EAAiBE,KAAKG,QAC7B,IAAK,iBACJf,EAAS,sCAAkC,MAC5C,IAAK,mBACJA,EAAS,oCAAgC,MAC1C,QACCA,EAAS,oDAAsCc,EAAOJ,gBAA7C,aAAsC,EAAiBE,KAAKG,aAErEC,SAAQ,WACVlB,GAAa,OAKWmB,MAAO,CAACC,SAAU,SAA3C,UACC,+CACA,sBAAKC,UAAU,aAAf,UACC,qDACA,uBAAOA,UAAU,eAAeC,KAAK,OAAOC,SAAU,SAACC,GAAS5B,EAAY4B,EAAGC,OAAOC,aAEvF,sBAAKL,UAAU,aAAf,UACC,4CACA,uBAAOA,UAAU,eAAeC,KAAK,WAAWC,SAAU,SAACC,GAAS1B,EAAY0B,EAAGC,OAAOC,aAEzFzB,GACD,qBAAKoB,UAAU,qBAAf,SAAqCpB,IAEtC,yBAAQoB,UAAU,kBAAkBC,KAAK,SAAzC,0BAEEvB,GAAa,sBAAMsB,UAAU,6CAE/B,wBAAQA,UAAU,oBAAoBM,QAASlC,EAAMmC,aAArD,gC,YCtDY,SAASC,EAAapC,GAEjC,IAAD,EAC4BC,mBAAS,IADrC,mBACGC,EADH,KACaC,EADb,OAE4BF,mBAAS,IAFrC,mBAEGG,EAFH,KAEaC,EAFb,OAG0CJ,mBAAS,IAHnD,mBAGGoC,EAHH,KAGoBC,EAHpB,OAIsBrC,mBAAwB,MAJ9C,mBAIGO,EAJH,KAIUC,EAJV,OAK0BR,mBAAwB,MALlD,mBAKGsC,EALH,KAKYC,EALZ,OAM8BvC,oBAAS,GANvC,mBAMGK,EANH,KAMcC,EANd,KAOF,OACC,uBAAMG,SA8BP,SAAqBC,GAGpB,GAFAA,EAAEC,iBAEER,IAAaiC,EAEhB,YADA5B,EAAS,wBAGV,GAA+B,IAA3BL,EAASqC,OAAOC,QAA2C,IAA3BxC,EAASuC,OAAOC,OAEnD,YADAjC,EAAS,qDAKV,IAAII,EAAW,IAAIC,SACnBD,EAASE,OAAO,WAAYb,GAC5BW,EAASE,OAAO,WAAYX,GAC5BG,GAAa,GACbb,EAAIsB,KAAK,YAAaH,GAAUI,MAAK,SAACE,GAGrCZ,GAAa,GACbE,EAAS,MACT+B,EAAW,gEACTlB,OAAM,SAACC,GAAwB,IAAD,EAC5BC,EAAM,UAAGD,EAAOJ,gBAAV,aAAG,EAAiBE,KAAKG,OAElCf,EADc,wBAAXe,EACM,6DAEA,6CA1DkBE,MAAO,CAACC,SAAU,SAA/C,UACC,iDACA,sBAAKC,UAAU,aAAf,UACC,qDACA,uBAAOA,UAAU,eAAeC,KAAK,OAAOC,SAAU,SAACC,GAAS5B,EAAY4B,EAAGC,OAAOC,aAEvF,sBAAKL,UAAU,aAAf,UACC,4CACA,uBAAOA,UAAU,eAAeC,KAAK,WAAWC,SAAU,SAACC,GAAS1B,EAAY0B,EAAGC,OAAOC,aAE3F,sBAAKL,UAAU,aAAf,UACC,0DACA,uBAAOA,UAAU,eAAeC,KAAK,WAAWC,SAAU,SAACC,GAASO,EAAmBP,EAAGC,OAAOC,aAEhGzB,GACD,qBAAKoB,UAAU,qBAAf,SAAqCpB,IAEpC+B,GACD,qBAAKX,UAAU,sBAAf,SAAsCW,IAEvC,yBAAQX,UAAU,kBAAkBC,KAAK,SAAzC,4BAEEvB,GAAa,cAACqC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,KAAKC,QAAQ,YAAYlB,UAAU,YAEnF,wBAAQA,UAAU,oBAAoBM,QAASlC,EAAMmC,aAArD,8B,mFChCI,SAASY,EAA2BC,GACvC,IAAIC,EAAQ,GACRC,EAAO,GA4BX,OA3BIF,EAAEG,QACFD,EAAKE,KAAL,eAAkBJ,EAAEG,SACpBH,EAAEK,QACFH,EAAKE,KAAL,cAAiBJ,EAAEK,SACvBJ,EAAMG,KAAKF,GACXA,EAAO,GACHF,EAAEM,OACFJ,EAAKE,KAAL,eAAkBJ,EAAEM,QACpBN,EAAEO,OACFL,EAAKE,KAAL,gBAAmBJ,EAAEO,QACrBP,EAAEQ,WACFN,EAAKE,KAAL,cAAiBJ,EAAEQ,YACvBP,EAAMG,KAAKF,GACXA,EAAO,GACHF,EAAES,UAAYT,EAAEU,SAChBR,EAAKE,KAAL,cAAiBJ,EAAES,WACnBT,EAAES,WAAaT,EAAEU,SACjBR,EAAKE,KAAL,oBAAkBJ,EAAES,WACpBT,EAAEU,SACFR,EAAKE,KAAL,eAAkBJ,EAAEU,UACxBT,EAAMG,KAAKF,GACXA,EAAO,GACHF,EAAEW,QACFT,EAAKE,KAAL,eAAkBJ,EAAEW,SACpBX,EAAEY,YACFV,EAAKE,KAAL,0BAAwBJ,EAAEY,aAC9BX,EAAMG,KAAKF,GACJD,EACFY,QAAO,SAAAX,GAAI,OAAIA,EAAKR,OAAS,KAC7BoB,KAAI,SAAAZ,GAAI,OAAIA,EAAKa,KAAK,SACtBA,KAAK,MASP,SAASlD,EAASmD,GACrB,IAAIC,EAAK,IAAInD,SAIb,OAHAoD,OAAOC,KAAKH,GAAQI,SAAQ,SAAAC,GACxBJ,EAAGlD,OAAOsD,EAAOL,EAAOK,OAErBJ,EAQJ,SAASK,EAAgBC,GAC5B,IAAIC,EAAgBC,SAASC,SAASC,OACjCC,OAAO,GACPC,MAAM,KACNhB,QAAO,SAAAiB,GAAC,OAAiB,IAAbA,EAAEpC,UACdoB,KAAI,SAAAgB,GAAC,4BAAOA,EAAED,MAAM,KAAK,GAApB,UAAyBC,EAAED,MAAM,KAAK,UAAtC,QAA4C,OACjDE,QAAO,SAACC,EAAMC,GAAP,OAAgBf,OAAOgB,OAAOF,EAAMC,KAAO,IAEvD,OADAf,OAAOgB,OAAOV,EAAeD,GACtB,IACHL,OAAOC,KAAKK,GACXX,QAAO,SAAAsB,GAAG,OAA2B,OAAvBX,EAAcW,SAAwCC,IAAvBZ,EAAcW,MAC3DrB,KAAI,SAAAqB,GAAG,OACJA,EAAM,IAAMX,EAAcW,MAE7BpB,KAAK,KCxEC,SAASsB,EAAkBrF,GAItC,IAAD,IACOsF,EAAQ,IAAIC,gBAAgBC,cAAcb,QAC1Cc,EAAW,UAAGzF,EAAMyF,mBAAT,QAAwBC,SAAQ,UAACJ,EAAMpE,IAAI,YAAX,QAAmB,KACpE,OACI,8BACI,oBAAIU,UAAU,4BAAd,SACK+D,MAAM3F,EAAM4F,OAAOC,KAAK,GAAG/B,KAAI,SAACgC,EAAKC,GAAN,OAC5B,oBAAInE,UAAWoE,IAAW,CAAC,aAAa,EAAM,OAAUD,IAAUN,IAAlE,SACI,cAAC,IAAD,CAAMQ,GAAI3B,EAAgB,CAACQ,EAAGiB,EAAMG,aAActE,UAAU,YAA5D,SACKmE,EAAM,KAFuEA,UCX3F,SAASI,EAAcnG,GAQlC,IAAD,EACmCC,mBAA+BiE,OAAOgB,OAAO,GAAIlF,EAAMoG,UAD1F,mBACMC,EADN,KACkBC,EADlB,OAE+BrG,oBAAS,GAFxC,mBAEMsG,EAFN,KAEgBC,EAFhB,KAUC,SAASC,EAAcC,GACnB,IAAIH,EAAWrC,OAAOC,KAAKnE,EAAMoG,SAASO,MAAK,SAACC,GAAD,OAAU5G,EAAMoG,QAAQQ,KAAUF,EAAKE,MACtFN,EAAcI,GACdF,EAAYD,GACZvG,EAAM6G,UAAY7G,EAAM6G,SAASH,GAAOH,GAY5C,IAAIO,EACA5C,OAAOC,KAAKnE,EAAMoG,SACjBvC,QAAO,SAAC+C,GAAD,OAAU5G,EAAMoG,QAAQQ,KAAUP,EAAWO,MAEzD,OACI,sBAAKhF,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SACI,oBAAIA,UAAU,aAAd,uBAEJ,sBAAKA,UAAU,gBAAf,UACK5B,EAAM+G,SACP,uBAAOnF,UAAU,qCAAjB,SACI,gCACKsC,OACAC,KAAKkC,GACLW,MAAK,SAACC,EAAGC,GAAJ,eAAUlH,EAAMmH,YAAa,UAAAnH,EAAMmH,kBAAN,eAAkBC,WAAU,SAAAC,GAAC,OAAIA,IAAMJ,OAAvC,UAA4CjH,EAAMmH,kBAAlD,aAA4C,EAAkBC,WAAU,SAAAC,GAAC,OAAIA,IAAMH,MAAK,KAC1HpD,KAAI,SAAC8C,GAAU,IAAD,EACX,OAAK1C,OAAOC,KAAKnE,EAAMsH,kBAAkBC,SAASX,GAG9C,qBAAIhF,UAAW4F,IAAW,CAAC,YAAaxH,EAAMyH,eAAiBX,EAAYS,SAASX,KAApF,UACI,6BAAK5G,EAAMsH,iBAAiBV,KAC5B,6BACI,uBACIhF,UAAU,+BACVC,KAAK,OACLI,MAAK,UAAEoE,EAAWO,UAAb,QAAsB,GAC3B9E,SAAU,SAACC,IAjDnD,SAAsB6E,EAAc3E,GAChC,IAAIyE,EAAOxC,OAAOgB,OAAO,GAAImB,GAC7BK,EAAKE,GAAQ3E,EACbwE,EAAcC,GA8C0CgB,CAAad,EAAM7E,EAAGC,OAAOC,cAPsC2E,GAF5F,eAkB3B,sBAAKhF,UAAU,cAAf,UACK2E,GAAY,YACb,sBAAK3E,UAAU,wBAAf,UACI,yBACIC,KAAK,SACLD,UAAU,uCACVM,QA/CpB,WAEIuE,EADWvC,OAAOgB,OAAO,GAAIlF,EAAMoG,WA2CvB,UAKI,sBAAMxE,UAAU,qBALpB,oBAQA,yBACIC,KAAK,SACLD,UAAU,qCACVM,QA3DpB,WACIlC,EAAMU,SAAS2F,IAuDH,UAKI,sBAAMzE,UAAU,yBALpB,4BCoLpB,SAAS+F,EAAaC,EAAcC,GAChC,OAAQA,EAAOhG,MACX,IAAK,cACD,OAAO,2BACA+F,GADP,IAEItH,UAAWuH,EAAOC,UAE1B,IAAK,mBACD,OAAO,2BACAF,GADP,IAEIG,aAAcF,EAAOC,UAE7B,IAAK,qBACD,IAAIE,EAAQ,YAAOJ,EAAMG,cACrBhC,EAAQiC,EAASZ,WAAU,SAAApE,GAAC,OAAIA,EAAEiF,MAAQJ,EAAOC,QAAQG,OAM7D,OALe,IAAXlC,EACAiC,EAASjC,GAAS8B,EAAOC,QAEzBE,EAAS5E,KAAKyE,EAAOC,SAElB,2BACAF,GADP,IAEIG,aAAcC,IAEtB,IAAK,qBACD,OAAO,2BACAJ,GADP,IAEIG,aAAcH,EAAMG,aAAalE,QAAO,SAAAb,GAAC,OAAIA,EAAEiF,MAAQJ,EAAOC,aAEtE,IAAK,0BACD,OAAO,2BACAF,GADP,IAEIM,kBAAmBL,EAAOC,UAElC,IAAK,qCACD,OAAO,2BACAF,GADP,IAEIO,4BAA6BN,EAAOC,UAE5C,QAAS,MAAM,IAAIM,MAAM,mBAIlBC,MA1Rf,SAA0BrI,GAEtB,IAAD,MACOsF,EAAQ,IAAIC,gBAAgBC,cAAcb,QAC1C2D,EAAUC,cAFjB,EAG2BC,qBAAmCb,EAAc,CACvEI,aAAc,GACdU,eAAgB,GAChBP,mBAAmB,EACnBC,6BAA6B,EAC7B7H,WAAW,IARhB,mBAGQsH,EAHR,KAGec,EAHf,KAWOC,EACFC,KAAKC,MAAMjB,EAAMG,aAAarF,OAASkF,EAAMa,iBAC5Cb,EAAMG,aAAarF,OAASkF,EAAMa,iBAAmB,EAAI,EAAI,IAC/B,IAA9Bb,EAAMG,aAAarF,OAAe,EAAI,GACrCoG,EAAOxD,EAAMpE,IAAI,QAAUwE,SAAQ,UAACJ,EAAMpE,IAAI,eAAX,QAAsB,MAAQ,KACjE6H,EAAazD,EAAMpE,IAAI,MAAQwE,SAAQ,UAACJ,EAAMpE,IAAI,aAAX,QAAoB,MAAQ,KACnE8H,EAAcpB,EAAMG,aAAakB,MAAK,SAAAC,GAAI,OAAIA,EAAKjB,MAAQc,KAC3DtD,EAAcC,SAAQ,UAACJ,EAAMpE,IAAI,YAAX,QAAmB,KAe/C,GAbAiI,qBAAU,WACNzJ,EAAIwB,IAAI,iBAAiBD,MAAK,SAACE,GAC3BuH,EAAS,CACL7G,KAAM,mBACNiG,QAAS3G,EAASE,KAAKA,OAE3BqH,EAAS,CACL7G,KAAM,cACNiG,SAAS,SAGlB,IAEU,OAATgB,IAAkBlB,EAAMtH,UAAW,CAGnC,IAAI8I,EAAUR,KAAKC,MACfjB,EAAMG,aAAaX,WAAU,SAAApE,GAAC,OAAIA,EAAEiF,MAAQa,KAC5ClB,EAAMa,gBAEVH,EAAQlF,KAAR,aAAmBgG,EAAnB,eAAiCN,IAGrC,SAASO,EAAgBC,GACrB,GAAI1B,EAAMM,kBACNqB,QACG,CACH,IAAMC,EAASF,IAAOP,EAAY,KAAOO,EAAGpD,WAC5CoC,EAAQlF,KAAKkB,EAAgB,CAACgF,GAAIE,MAI1C,SAASD,IACLb,EAAS,CACL7G,KAAM,qCACNiG,SAAS,IAEb2B,YAAW,WACPf,EAAS,CACL7G,KAAM,qCACNiG,SAAS,MAEd,KAqDP,OAAIF,EAAMtH,UAEF,sBAAMsB,UAAU,2BAKpB,qCACI,cAAC,IAAD,CAAQ8H,KAAM9B,EAAMM,kBAAmByB,QAAS,yHAChD,sBAAK/H,UAAU,MAAf,UACI,sBAAKA,UAAWoH,EAAc,WAAa,SAA3C,UACI,sBAAKpH,UAAU,cAAf,UACI,qBAAKA,UAAU,OAAf,SACI,yBAAQA,UAAU,kBAAkBM,QA/D5D,WACQ0F,EAAMM,kBACNqB,IAEA7J,EAAIsB,KAAK,gBAAgBC,MAAK,SAACE,GAC3BuH,EAAS,CACL7G,KAAM,qBACNiG,QAAS3G,EAASE,KAAKA,WAwDf,UACI,sBAAMO,UAAU,wBADpB,8BAKJ,qBAAKA,UAAU,kBAAf,SACI,cAACyD,EAAD,CAAmBO,MAAO+C,EAAYlD,YAAaA,SAG3D,wBAAO7D,UAAU,uDAAjB,UACI,gCACI,+BACI,sCACA,wCACA,kDACGoH,GAAe,mDAG1B,gCACKpB,EAAMG,aACNf,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE2C,KAAO1C,EAAE0C,KAAO,GAAK,KACtCC,MAAMjC,EAAMa,eAAiBhD,EAAamC,EAAMa,eAAiBhD,EAAcmC,EAAMa,gBACrF3E,KAAI,SAACoF,EAAMnD,GAAP,OACD,qBACInE,UAAWoE,IAAW,CAClB,eAAgBkD,EAAKjB,MAAQc,IAAcnB,EAAMM,kBACjD,gBAAiBgB,EAAKjB,MAAQc,GAAanB,EAAMM,oBAErDxG,MAAO,CAACoI,OAAQ,WALpB,UAQI,qBACI5H,QAAS,kBAAMmH,EAAgBH,EAAKjB,MADxC,UAGI,sBAAMrG,UAAU,qBAAhB,SAAsC6D,EAAcmC,EAAMa,eAAiB1C,EAAM,IACjF,sBAAMnE,UAAU,mBAAhB,SAAoCsH,EAAKjB,MAJ7C,OAMKiB,EAAKU,OANDV,EAAKU,MAQd,oBACI1H,QAAS,kBAAMmH,EAAgBH,EAAKjB,MADxC,SAGKlF,EAA2BmG,GAAMrE,MAAM,MAAMf,KAAI,SAAAiG,GAAG,OAAI,qCAAGA,EAAI,8BAH3DhE,EAAM,MAKf,oBACI7D,QAAS,kBAAMmH,EAAgBH,EAAKjB,MADxC,SAGKiB,EAAKc,cAHDjE,EAAM,OAKZiD,GACH,6BACI,eAAC,IAAD,CACIpH,UAAU,8BACVqE,GAAI,kBAAoBiD,EAAKjB,IAFjC,UAII,sBAAMrG,UAAU,kBAJpB,yCAtBCqI,IAAWf,YAmChC,qBAAKtH,UAAU,kBAAf,SACI,cAACyD,EAAD,CAAmBO,MAAO+C,EAAYlD,YAAaA,SAG3D,qBAAK7D,UAAU,MAAf,SACMoH,GAAe,qCACb,sBAAKpH,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SACI,oBAAIA,UAAU,aAAd,4BAEJ,sBAAKA,UAAU,+BAAf,UACI,eAAC,IAAD,CACIA,UAAU,8BACVqE,GAAI,kBAAoB+C,EAAYf,IAFxC,UAII,sBAAMrG,UAAU,kBAJpB,qCAOA,yBAAQA,UAAU,gCAAgCM,QApI9E,WAEI,GADUgI,OAAOC,QAAQ,gGAA4DnB,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAaY,OAClG,CAEA,IAAI/I,EAAW,IAAIC,SACnBD,EAASE,OAAO,UAAW,UAC3BrB,EAAIsB,KAAJ,8BAAyBgI,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAaf,KAAOpH,GAAUI,MAAK,SAACE,GAAc,IAAD,EACtEuH,EAAS,CACL7G,KAAM,qBACNiG,QAAO,iBAAEkB,QAAF,IAAEA,OAAF,EAAEA,EAAaf,WAAf,SAAuB,SA2Hd,UACI,sBAAMrG,UAAU,wBADpB,kCAMR,cAAC,EAAD,CACIwE,QAAO,OAAE4C,QAAF,IAAEA,IAAe,GACxBtI,SA9HxB,SAAsB2F,GAElB,IAFoD,EAEhDxF,EAAW,IAAIC,SACfgG,EACA5C,OAAOC,KAAP,OAAY6E,QAAZ,IAAYA,IAAe,IAC1BnF,QAAO,SAAC+C,GAAD,OAAWoC,EAAqCpC,KAAUP,EAAWO,MAL7B,cAMnCE,GANmC,IAMpD,2BAA8B,CAAC,IAAD,EAArBsD,EAAqB,QAC1BvJ,EAASE,OAAOqJ,EAAhB,UAAsB/D,EAAW+D,UAAjC,QAA0C,KAPM,8BASpDvJ,EAASE,OAAO,UAAW,SAC3BrB,EAAIsB,KAAJ,uBAAyBqF,EAAW4B,KAAOpH,GAAUI,MAAK,SAACE,GAEvDuH,EAAS,CACL7G,KAAM,qBACNiG,QAASzB,IAEbqC,EAAS,CACL7G,KAAM,0BACNiG,SAAS,QA6GGjB,SAAU,SAACwD,EAAQC,GACf5B,EAAS,CACL7G,KAAM,0BACNiG,SAAUwC,KAGlB7C,cAAeG,EAAMO,4BAErBb,iBH5JjB,CACHsC,KAAM,OACNzG,OAAQ,SACRE,OAAQ,eACRC,MAAO,OACPC,MAAO,QACPC,UAAW,aACXC,SAAU,aACVC,QAAS,SACTC,OAAQ,eACRC,WAAY,kBACZoG,aAAc,mBGkJM7C,WH7HjB,CACH,OACA,SACA,SACA,QACA,QACA,YACA,WACA,UACA,SACA,aACA,iBGgHyB8C,IAAWjB,gB,gBC3K7BuB,MA/Ef,SAAqBvK,GAEjB,IAAD,EAEyCC,oBAAS,GAFlD,mBAEMuK,EAFN,KAEqBC,EAFrB,KAIC,OACI,qCACI,oGACA,4TAIA,gEAC8B,uBAC1B,wBAAQ5I,KAAK,SAASD,UAAU,iCAAiCM,QAAS,kBAAMuI,GAAiB,IAAjG,0BAEJ,cAACC,EAAA,EAAD,CAAQ5H,QAAQ,YAAYZ,QAsDpC,WACIxC,EAAIsB,KAAK,WAAWC,MAAK,WACrBjB,EAAM2K,SAAS,sBAxDf,6BAGA,eAACC,EAAA,EAAD,CAAOC,KAAML,EAAeM,OAAQ,kBAAML,GAAiB,IAAQM,YAAU,EAA7E,UACI,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACL,EAAA,EAAMM,MAAP,sCAEJ,eAACN,EAAA,EAAMO,KAAP,WACI,gDACA,qBAAIvJ,UAAU,kBAAd,UACI,oBAAIA,UAAU,0BAAd,0FAGA,oBAAIA,UAAU,2BAAd,kJAGA,oBAAIA,UAAU,2BAAd,qFAGA,oBAAIA,UAAU,2BAAd,wFAGA,oBAAIA,UAAU,2BAAd,6GAIJ,gDACA,qBAAIA,UAAU,aAAd,UACI,oBAAIA,UAAU,2BAAd,kJAGA,oBAAIA,UAAU,2BAAd,uIAGA,oBAAIA,UAAU,0BAAd,iGAGA,oBAAIA,UAAU,2BAAd,gHAGA,oBAAIA,UAAU,0BAAd,qJAKR,cAACgJ,EAAA,EAAMQ,OAAP,UACI,qBAAKxJ,UAAU,kBAAkBM,QAAS,kBAAMuI,GAAiB,IAAjE,iCC7DL,SAASY,EAA0BrL,GAM9C,IAAD,IAEOsI,EAAUC,cACVjD,EAAQ,IAAIC,gBAAgB2E,OAAOxF,SAASC,QAC5CoE,EAAYzD,EAAMpE,IAAI,MAAQwE,SAAQ,UAACJ,EAAMpE,IAAI,aAAX,QAAoB,KAAO,KACjE4H,EAAOxD,EAAMpE,IAAI,QAAUwE,SAAQ,UAACJ,EAAMpE,IAAI,eAAX,QAAsB,KAAO,KAChEoK,EACFtL,EAAM+H,aACLlE,QAAO,SAAAqF,GAAI,OAAIlJ,EAAMuL,QAAQzH,KAAI,SAAA0H,GAAI,OAAIA,EAAKC,iBAAelE,SAAS2B,EAAKjB,QAC3EjB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE2C,KAAO1C,EAAE0C,KAAO,GAAK,KAQ3C,OANAT,qBAAU,WAAO,IAAD,EACZ,UAAA1E,SAASiH,eAAe,MAAQ3C,UAAhC,SAA4C4C,eAAe,CACvDC,SAAU,aAEf,CAAC7C,IAES,OAATD,GACAR,EAAQlF,KAAR,cAAoB0F,IACb,MAIP,qCACqB,OAAdC,IAAuBuC,EAAkBxH,KAAI,SAAAd,GAAC,OAAIA,EAAEiF,OAAKV,SAAlC,OAA2CwB,QAA3C,IAA2CA,KAAc,IACnF,qBAAKnH,UAAU,qBAAf,SACE,WAAO,IAAD,EACEsH,EAAOlJ,EAAM+H,aAAakB,MAAK,SAAAjG,GAAC,OAAIA,EAAEiF,MAAQc,KACpD,OAAO,sEACWG,QADX,IACWA,OADX,EACWA,EAAMU,YADjB,QACyB,QADzB,uGAFT,KAQA0B,EACDxH,KAAI,SAAC+H,EAAa9F,GACf,IAAMwF,EAAUvL,EAAMuL,QAAQ1H,QAAO,SAAA2H,GAAI,OAAIA,EAAKC,gBAAkBI,EAAY5D,OAC1E6D,EAAkBP,EAAQ1H,QAAO,SAAA2H,GAAI,MAAkB,aAAdA,EAAK3J,QAC9CkK,EAAkBR,EAAQ1H,QAAO,SAAA2H,GAAI,MAAkB,aAAdA,EAAK3J,QACpD,OAAO,mCACH,sBAAKD,UAAU,YAAf,UACI,sBAAKA,UAAU,gCAAf,UACI,qBAAIA,UAAU,sBAAsB0H,GAAI,MAAQuC,EAAY5D,IAA5D,UACI,sBAAMrG,UAAU,qBAAhB,SAAsCmE,EAAM,IAC5C,sBAAMnE,UAAU,wBAAhB,SAAyCiK,EAAY5D,MACrD,sBAAMrG,UAAU,mBACfiK,EAAYjC,KACb,uBAAMhI,UAAU,wBAAhB,UAAyC2J,EAAQ7I,OAAjD,kBAEFqG,IAAc8C,EAAY5D,IACxB,eAAC,IAAD,CAAMrG,UAAU,6CAA6CqE,GAAG,IAAhE,UACI,sBAAMrE,UAAU,qBADpB,aAKA,eAAC,IAAD,CAAMA,UAAU,6CAA6CqE,GAAI,OAAS4F,EAAY5D,IAAtF,UACI,sBAAMrG,UAAU,uBADpB,mBAMNmH,IAAc8C,EAAY5D,KAC5B,qBAAKrG,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,SAAf,UACI,yCACA,wBAAOA,UAAU,8EAAjB,UACI,gCAAO,+BACH,qCACA,iDACA,kDACA,sDAEJ,kCACEkK,EAAgBhI,KAAI,SAACkI,EAAQjG,GAAT,OAClB,+BACI,+BACI,sBAAMnE,UAAU,qBAAhB,SAAsCmE,EAAM,IAC5C,sBAAMnE,UAAU,wBAAhB,SAAyCoK,EAAO/D,MAChD,cAAC,IAAD,CAAMhC,GAAI,qBAAqB+F,EAAO/D,IAAtC,SAC4B,IAAvB+D,EAAOC,KAAKvJ,OAAesJ,EAAOC,KAAO,wBAGlD,6BAAKD,EAAOE,eACZ,6BAAKF,EAAOG,cACZ,6BAAKH,EAAOhC,qBAGS,IAA3B8B,EAAgBpJ,QAClB,6BACI,qBAAI0J,QAAS,EAAb,UACI,sBAAMxK,UAAU,qBADpB,kCASZ,sBAAKA,UAAU,SAAf,UACI,yCACA,wBAAOA,UAAU,8EAAjB,UACI,gCAAO,+BACH,qCACA,wCACA,kDACA,sDAEJ,kCACEmK,EAAgBjI,KAAI,SAACkI,EAAQjG,GAAT,OAClB,+BACI,+BACI,sBAAMnE,UAAU,qBAAhB,SAAsCmE,EAAM,IAC5C,sBAAMnE,UAAU,wBAAhB,SAAyCoK,EAAO/D,MAChD,cAAC,IAAD,CAAMhC,GAAI,qBAAqB+F,EAAO/D,IAAtC,SAC4B,IAAvB+D,EAAOC,KAAKvJ,OAAesJ,EAAOC,KAAO,wBAGlD,+BACMD,EAAOK,aAAe,qDAAWL,EAAOK,YAAY,0BACpDL,EAAOM,UAAY,sDAAYN,EAAOM,SAAS,0BAC/CN,EAAOE,cAAgB,sDAAYF,EAAOE,aAAa,6BAE7D,6BAAKF,EAAOG,cACZ,6BAAKH,EAAOhC,qBAGS,IAA3B+B,EAAgBrJ,QAClB,6BACI,qBAAI0J,QAAS,EAAb,UACI,sBAAMxK,UAAU,qBADpB,yCAzFQiK,EAAY5D,aChDjD,SAASsE,EAAevM,GAKnC,IAAD,EACmCC,mBAAqB,YADxD,mBACMuM,EADN,KACkBC,EADlB,OAEqCxM,oBAAkB,GAFvD,mBAEM4L,EAFN,KAEmBa,EAFnB,KAaC,OACI,cAAC9B,EAAA,EAAD,CAAOC,KAAM7K,EAAM6K,KAAMC,OAAQ9K,EAAM8K,OAAvC,SACI,uBAAMpK,SAPd,SAAsBqB,GAClBA,EAAGnB,iBACHZ,EAAMU,SAAS8L,EAAYX,IAKvB,UACI,cAACjB,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACL,EAAA,EAAMM,MAAP,gDAEJ,cAACN,EAAA,EAAMO,KAAP,UACI,qCACI,sBAAKvJ,UAAU,aAAf,UACI,mDACA,yBAAQA,UAAU,eAAeK,MAAOuK,EAAY1K,SAAU,SAAAC,GAAE,OAAI0K,EAAc1K,EAAGC,OAAOC,QAA5F,UACI,wBAAQA,MAAM,WAAd,0BACA,wBAAQA,MAAM,WAAd,gCAGR,sBAAKL,UAAU,aAAf,UACI,gCAAuB,aAAf4K,EAA4B,aAAe,gBACnD,yBAAQ5K,UAAU,eAAeK,MAAK,OAAE4J,QAAF,IAAEA,IAAe,EAAG/J,SAAU,SAAAC,GAAE,OAAI2K,EAAehH,SAAS3D,EAAGC,OAAOC,SAA5G,UACI,wBAAQA,OAAQ,EAAY0K,UAAU,EAAtC,gCAAyB,GACxB3M,EAAM+H,aAAajE,KAAI,SAAAoF,GAAI,OACxB,yBAAQjH,MAAOiH,EAAKjB,IAApB,UACKiB,EAAKU,KADV,KACkBV,EAAK/F,OADvB,IACgC+F,EAAK7F,OADrC,KAC+C6F,EAAKzF,SADpD,IAC+DyF,EAAKxF,QADpE,IAC8EwF,EAAKtF,aADrDsF,EAAKjB,cAM/C,yJAGR,eAAC2C,EAAA,EAAMQ,OAAP,WACI,wBAAQxJ,UAAU,0BAA0BC,KAAK,SAASK,QAASlC,EAAM8K,OAAzE,2BACA,wBAAQlJ,UAAU,kBAAkBC,KAAK,SAAS8K,YAvCtC,IAAjBd,GAuCK,iCC/BL,SAASe,EAAoB5M,GAMxC,IAAD,wBACO0E,EAAWc,cACXF,EAAQ,IAAIC,gBAAgBb,EAASC,QACrCc,EAAcC,SAAQ,UAACJ,EAAMpE,IAAI,YAAX,QAAmB,KACzC6H,EAAYzD,EAAMpE,IAAI,MAAQwE,SAAQ,UAACJ,EAAMpE,IAAI,aAAX,QAAoB,KAAO,KACjE4H,EAAOxD,EAAMpE,IAAI,QAAUwE,SAAQ,UAACJ,EAAMpE,IAAI,eAAX,QAAsB,KAAO,KALvE,EAM2BsH,qBAAWb,EAAc,CAC/Cc,eAAgB,GAChBoE,oBAAoB,EACpB3E,mBAAmB,EACnBC,6BAA6B,IAVlC,mBAMQP,EANR,KAMec,EANf,KAYOJ,EAAUC,cACVuE,EAAoBxH,EAAMpE,IAAI,KAAOwE,SAAQ,UAACJ,EAAMpE,IAAI,YAAX,QAAmB,MAAQ,KACxE6L,EAAiC,SAAnBzH,EAAMpE,IAAI,MAAV,UAA6BoE,EAAMpE,IAAI,YAAvC,QAAuD,KACrE8L,EAAkBhN,EAAMuL,QAAQ1H,QAAO,SAAA2H,GACzC,IAAIyB,GAAM,EAKV,OAJmB,OAAfF,IACAE,EAAMA,GAAOzB,EAAK3J,OAASkL,GACL,OAAtBD,IACAG,EAAMA,GAAOzB,EAAKC,gBAAkBqB,GACjCG,KAELtE,EACFC,KAAKC,MAAMmE,EAAgBtK,OAASkF,EAAMa,iBACzCuE,EAAgBtK,OAASkF,EAAMa,iBAAmB,EAAI,EAAI,GACzDyE,EAAa,UAAGF,EAAgB/D,MAAK,SAAAuC,GAAI,OAAIA,EAAKvD,MAAQc,YAA7C,QAA2D,KAE9E,GAAa,OAATD,EAAe,CAEf,IAAIM,EAAUR,KAAKC,MACfmE,EAAgB5F,WAAU,SAAA+F,GAAC,OAAIA,EAAElF,MAAQa,KACzClB,EAAMa,gBAQV,OALAH,EAAQlF,KAAKkB,EAAgB,CACzB8I,KAAM,KACN9D,GAAIR,EACJhE,EAAGsE,KAEA,KAQX,SAASiE,EAA4BC,GACjC5E,EAAS,CACL7G,KAAM,0BACNiG,QAASwF,IAIjB,SAASjE,EAAgBkE,GACrB,IAAIjE,EACJ,GAAI1B,EAAMM,kBAWN,OAVAQ,EAAS,CACL7G,KAAM,qCACNiG,SAAS,SAEb2B,YAAW,WACPf,EAAS,CACL7G,KAAM,qCACNiG,SAAS,MAEd,KAIHwB,EADAP,IAAcwE,EACT,KACCA,EAAMrH,WAChBoC,EAAQlF,KAAKkB,EAAgB,CAACgF,QAkBlC,SAASkE,EAAaC,GAClB,OAAOzN,EAAM+H,aAAakB,MAAK,SAAAC,GAAI,OAAIA,EAAKjB,MAAQwF,KAGxD,OACI,qCACI,cAAC,IAAD,CAAQ/D,KAAM9B,EAAMM,kBAAmByB,QAAS,yHAChD,cAAC4C,EAAD,CACIxE,aAAc/H,EAAM+H,aACpB8C,KAAMjD,EAAMiF,mBACZ/B,OAAQ,kBAAMuC,GAA4B,IAC1C3M,SA3DZ,SAAsBmB,EAAkB4L,GACpCJ,GAA4B,GAC5BrN,EAAM0N,SAAS7L,EAAM4L,MA2DjB,sBAAK7L,UAAU,MAAf,UACI,sBAAKA,UAAWoE,IAAW,CAAC,WAAYkH,EAAe,aAAcA,IAArE,UACI,sBAAKtL,UAAU,cAAf,UACI,qBAAKA,UAAU,OAAf,SACI,yBAAQA,UAAU,kBAAkBM,QAAS,kBAAMmL,GAA4B,IAA/E,UACI,sBAAMzL,UAAU,sBADpB,6BAKJ,cAACyD,EAAD,CAAmBO,MAAO+C,OAE9B,sBAAK/G,UAAU,cAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,yBAAQA,UAAWoE,IAAW,CAC1B,KAAO,EACP,sBAAsC,aAAf+G,EACvB,cAA8B,aAAfA,IACf7K,QAAS,WACU,aAAf6K,EACAzE,EAAQlF,KAAKkB,EAAgB,CAACqJ,EAAG,QAChCrF,EAAQlF,KAAKkB,EAAgB,CAACqJ,EAAG,eAP1C,UASI,sBAAM/L,UAAU,4BATpB,mBAYA,yBAAQA,UAAWoE,IAAW,CAC1B,KAAO,EACP,sBAAsC,aAAf+G,EACvB,cAA8B,aAAfA,IACf7K,QAAS,WACU,aAAf6K,EACAzE,EAAQlF,KAAKkB,EAAgB,CAACqJ,EAAG,QAChCrF,EAAQlF,KAAKkB,EAAgB,CAACqJ,EAAG,eAP1C,UASI,sBAAM/L,UAAU,0BATpB,sBAaJ,qBAAKA,UAAU,iBAAf,SACI,yBACIA,UAAU,eACVK,MAAK,OAAE6K,QAAF,IAAEA,KAAsB,EAC7BhL,SAAU,SAACC,GACPuG,EAAQlF,KAAKkB,EAAgB,CAACtB,EAAwB,OAApBjB,EAAGC,OAAOC,MAAkBF,EAAGC,OAAOC,MAAQ,SAJxF,UAOI,wBAAQA,OAAQ,EAAhB,oCAAyB,GACpB6K,IAAsBE,EAAgBlJ,KAAI,SAAAqJ,GAAC,OAAIA,EAAE1B,iBAAelE,SAASuF,IACtE,yBAAQ7K,MAAO6K,EAAf,uCAAiEU,EAAaV,UAA9E,aAAiE,EAAiClD,YAAlG,QAA0G,mBAAnEkD,GAE1C9M,EAAM+H,aACNlE,QAAO,SAAAqF,GAAI,OAAIlJ,EAAMuL,QAAQzH,KAAI,SAAA0H,GAAI,OAAIA,EAAKC,iBAAelE,SAAS2B,EAAKjB,QAC3EnE,KAAI,SAAAoF,GAAI,OACL,yBAAQjH,MAAOiH,EAAKjB,IAApB,mBAA+CiB,EAAKU,OAAtBV,EAAKjB,gBAKvD,wBAAOrG,UAAWoE,IAAW,CACzB,wDAAwD,EACxD,oBAAqBkH,IAFzB,UAII,gCAAO,+BACH,qCACA,8CACA,qCACA,yCACA,kDACEA,GAAiB,mDAEvB,kCACgC,IAA3BF,EAAgBtK,QACjB,6BACI,qBAAI0J,QAAS,EAAb,qCAAoCY,EAAgBtK,SAAW1C,EAAMuL,QAAQ7I,QAAU,wBAAvF,SAGHsK,EACAnD,MAAMjC,EAAMa,eAAiBhD,EAAamC,EAAMa,eAAiBhD,EAAcmC,EAAMa,gBACrF3E,KAAI,SAACkI,EAAQjG,GAAT,mBACD,qBAEInE,UAAWoE,IAAW,CAClB,eAAgB+C,IAAciD,EAAO/D,MAAQL,EAAMM,kBACnD,gBAAiBa,IAAciD,EAAO/D,KAAOL,EAAMM,oBAJ3D,UAOI,qBACIxG,MAAO,CAACoI,OAAQ,WAChB5H,QAAS,kBAAMmH,EAAgB2C,EAAO/D,MAF1C,UAII,sBAAMrG,UAAU,qBAAhB,SAAsC6D,EAAcmC,EAAMa,eAAiB1C,EAAM,IACjF,sBAAMnE,UAAU,mBAAhB,SAAoCoK,EAAO/D,MAL/C,OAOK+D,EAAOC,QAEZ,oBACIvK,MAAO,CAACoI,OAAQ,WAChB5H,QAAS,kBAAMmH,EAAgB2C,EAAO/D,MAF1C,mBAIKuF,EAAaxB,EAAOP,sBAJzB,aAIK,EAAoC7B,OAEzC,oBACIlI,MAAO,CAACoI,OAAQ,WAChB5H,QAAS,kBAAMmH,EAAgB2C,EAAO/D,MAF1C,SAIqB,aAAhB+D,EAAOnK,KAAsB,qCAC1B,sBAAMD,UAAU,uBADU,kBAGxB,qCACF,sBAAMA,UAAU,qBADd,oBAKV,qBACIF,MAAO,CAACoI,OAAQ,WAChB5H,QAAS,kBAAMmH,EAAgB2C,EAAO/D,MAF1C,UAIK+D,EAAOG,aAAe,yDAAYH,EAAOG,YAAY,0BACrC,aAAhBH,EAAOnK,MAAuB,qCAC1BmK,EAAOK,aAAe,qDAAWL,EAAOK,YAAY,0BACpDL,EAAOM,UAAY,sDAAYN,EAAOM,SAAS,6BAEnDN,EAAOE,cAAgB,sDAAYF,EAAOE,aAAa,0BACvDF,EAAO4B,OAAS,mDAAS5B,EAAO4B,YAErC,oBACIlM,MAAO,CAACoI,OAAQ,WAChB5H,QAAS,kBAAMmH,EAAgB2C,EAAO/D,MAF1C,SAGE+D,EAAOhC,gBACNkD,GACH,+BACI,eAAC,IAAD,CACItL,UAAU,mCACVqE,GAAI,gCAAuBuH,EAAaxB,EAAOP,sBAA3C,aAAuB,EAAoCxD,KAAM,QAAjE,UAA0EuF,EAAaxB,EAAOP,sBAA9F,aAA0E,EAAoCxD,KAFtH,UAGI,sBAAMrG,UAAU,sBAHpB,sBAMA,eAAC,IAAD,CACIA,UAAU,mCACVqE,GAAI,iCAAwBuH,EAAaxB,EAAOP,sBAA5C,aAAwB,EAAoCxD,KAFpE,UAGI,sBAAMrG,UAAU,mBAHpB,6BAzDCoK,EAAO/D,cAqE5B,cAAC5C,EAAD,CAAmBO,MAAO+C,OAE9B,qBAAK/G,UAAU,MAAf,SACMsL,GAAiB,qCACnB,sBAAKtL,UAAU,sBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,oBAAIA,UAAU,aAAd,uCAIJ,sBAAKA,UAAU,YAAf,UAC4B,aAAvBsL,EAAcrL,KAAsB,YAAc,aADvD,kBAEK2L,EAAaN,EAAczB,sBAFhC,aAEK,EAA2C7B,KAAK,uBAFrD,QAGiC,aAAvBsD,EAAcrL,KAAsB,eAAY,eACtD,wBACID,UAAU,4BACVM,QAAS,WACLoG,EAAQlF,KAAKkB,EAAgB,CAACgF,GAAI,SAH1C,kDAUR,sBAAK1H,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SACI,oBAAIA,UAAU,aAAd,4BAEJ,sBAAKA,UAAU,+BAAf,UACI,eAAC,IAAD,CACIA,UAAU,8BACVqE,GAAI,gCAAuBuH,EAAaN,EAAczB,sBAAlD,aAAuB,EAA2CxD,KAAM,QAAxE,UAAiFuF,EAAaN,EAAczB,sBAA5G,aAAiF,EAA2CxD,KAFpI,UAGI,sBAAMrG,UAAU,sBAHpB,qCAMA,eAAC,IAAD,CACIA,UAAU,8BACVqE,GAAI,iCAAwBuH,EAAaN,EAAczB,sBAAnD,aAAwB,EAA2CxD,KAF3E,UAGI,sBAAMrG,UAAU,mBAHpB,wBAMA,yBACIA,UAAU,gCACVM,QAjN5B,WACIgL,GAAiBlN,EAAM6N,SAASX,IA8MZ,UAII,sBAAMtL,UAAU,uBAJpB,iCASR,cAACuE,EAAD,CACIC,QAAS8G,EACTrG,SAAU,SAACiH,EAAQxD,GACf5B,EAAS,CACL7G,KAAM,0BACNiG,SAAUwC,KAGlB5J,SA3OpB,SAAsB2F,GACb6G,GAELlN,EAAM6G,SAASR,EAAY6G,GAAejM,MAAK,WAC3CyH,EAAS,CACL7G,KAAM,0BACNiG,SAAS,QAsODR,iBPhQb,CACH2E,KAAM,MACNE,YAAa,kBACbD,aAAc,SACd0B,MAAO,YACP5D,aAAc,kBACdqC,YAAa,QACbC,SAAU,UO0PMnF,WPhOb,CACH,OACA,cACA,cACA,WACA,eACA,QACA,gBO0NgBM,cAAeG,EAAMO,6BAChB8B,IAAWiD,eASxC,SAASvF,EAAaC,EAAcC,GAChC,OAAQA,EAAOhG,MACX,IAAK,0BACD,OAAO,2BACA+F,GADP,IAEIiF,mBAAoBhF,EAAOC,UAEnC,IAAK,0BACD,OAAO,2BACAF,GADP,IAEIM,kBAAmBL,EAAOC,UAElC,IAAK,qCACD,OAAO,2BACAF,GADP,IAEIO,4BAA6BN,EAAOC,UAE5C,QACI,MAAM,IAAIM,OC3VP,SAAS2F,IACpB,IAAIC,EAAQC,cAD4B,EAEhBzF,qBAAWb,EAAc,CAC7CrH,WAAW,EACXiL,QAAS,GACTxD,aAAc,KALsB,mBAEnCH,EAFmC,KAE5Bc,EAF4B,KAgCxC,SAASwF,EAAarM,EAAkB4L,GACpCU,QAAQC,IAAI,CACR1O,EAAIsB,KAAK,UAAWH,EAAS,CACzBgB,OACA4J,cAAegC,KAElB7F,EAAMG,aAAajE,KAAI,SAAAoF,GAAI,OAAIA,EAAKjB,OAAKV,SAASkG,QAAWrI,EAC9D1F,EAAIwB,IAAI,gBAAkBuM,GAAQxM,MAAK,SAAAE,GACnCuH,EAAS,CACL7G,KAAM,oBACNiG,QAAS,CAAC3G,EAASE,KAAKA,aAGjCJ,MAAK,SAAAoN,GACJ3F,EAAS,CACL7G,KAAM,eACNiG,QAAS,CAACuG,EAAO,GAAGhN,KAAK2K,aAKrC,SAAStE,EAAarB,EAAkC6G,GACpD,IAD+E,EAC3EoB,EAAYjI,EAEZxF,EAAW,IAAIC,SACfgG,EACA5C,OAAOC,KAAP,OAAY+I,QAAZ,IAAYA,IAAiB,IAC5BrJ,QAAO,SAAC+C,GAAD,OAAWsG,EAAuCtG,KAAUP,EAAWO,MANJ,cAO9DE,GAP8D,IAO/E,2BAA8B,CAAC,IAAD,EAArBsD,EAAqB,QAC1BvJ,EAASE,OAAOqJ,EAAhB,UAAsB/D,EAAW+D,UAAjC,QAA0C,KARiC,8BAW/E,OADAvJ,EAASE,OAAO,UAAW,SACpBrB,EAAIsB,KAAK,WAAasN,EAAUrG,IAAKpH,GAC3CI,MAAK,SAAAE,GACFuH,EAAS,CACL7G,KAAM,eACNiG,QAAS,CAAC3G,EAASE,KAAK2K,aAKpC,SAASuC,EAAarB,GAA4B,IAAD,IAa3BO,EAZbvD,OAAOC,QAAQ,mGAYFsD,EAZ4E,iBAACP,QAAD,IAACA,OAAD,EAACA,EAAezB,qBAAhB,SAAkC,EAA5G,EAab7D,EAAMG,aAAakB,MAAK,SAAAC,GAAI,OAAIA,EAAKjB,MAAQwF,YAbhC,aAA8D,EAAkD7D,QAEpIlK,EAAIsB,KAAK,mBAAakM,QAAb,IAAaA,OAAb,EAAaA,EAAejF,KAAKpH,EAAS,CAC/C2N,QAAS,YACTvN,MAAK,SAAAE,GACLuH,EAAS,CACL7G,KAAM,mBACNiG,QAAS3G,EAASE,KAAK2K,OAAO/D,SAS1C,OAlFAkB,qBAAU,WACNgF,QAAQC,IAAI,CACR1O,EAAIwB,IAAI,YAAYD,MAAK,SAAAE,GACrB,IAAMoK,EAAUpK,EAASE,KAAKkK,QAC9B7C,EAAS,CACL7G,KAAM,eACNiG,QAASyD,OAGjB7L,EAAIwB,IAAI,iBAAiBD,MAAK,SAAAE,GAC1B,IAAMsN,EAAQtN,EAASE,KAAKA,KAC5BqH,EAAS,CACL7G,KAAM,oBACNiG,QAAS2G,EAAMzH,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE2C,KAAO1C,EAAE0C,KAAO,GAAK,YAG9D3I,MAAK,WACJyH,EAAS,CACL7G,KAAM,cACNiG,SAAS,SAGlB,IA4DCF,EAAMtH,UACC,mCACH,sBAAMsB,UAAU,qBAKpB,qCACI,qBAAIA,UAAU,qBAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC8M,EAAD,CAAeC,KAAK,QAAQC,KAAM,WAAY3I,GAAE,UAAK+H,EAAMa,IAAX,YAEpD,oBAAIjN,UAAU,WAAd,SACI,cAAC8M,EAAD,CAAeC,KAAK,UAAUC,KAAM,eAAgB3I,GAAE,UAAK+H,EAAMa,IAAX,iBAG9D,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAMd,EAAMa,IAAKE,OAAK,EAA7B,SACI,cAAC,IAAD,CAAU9I,GAAE,UAAK+H,EAAMa,IAAX,YAEhB,cAAC,IAAD,CAAOC,KAAI,UAAKd,EAAMa,IAAX,QAAX,SACI,cAACjC,EAAD,CACIrB,QAAS3D,EAAM2D,QACfxD,aAAcH,EAAMG,aACpB2F,SAAUQ,EACVrH,SAAUa,EACVmG,SAAUU,MAGlB,cAAC,IAAD,CAAOO,KAAI,UAAKd,EAAMa,IAAX,UAAX,SACI,cAACxD,EAAD,CACIE,QAAS3D,EAAM2D,QACfxD,aAAcH,EAAMG,aACpB2F,SAAUQ,EACVrH,SAAUa,EACVmG,SAAUU,YAQlC,SAASG,EAAc1O,GAMnB,IAAIgO,EAAQC,YAAc,CACtBa,KAAM9O,EAAMiG,GACZ8I,MAAO/O,EAAMgP,sBAEjB,OACI,eAAC,IAAD,CAAM/I,GAAIjG,EAAMiG,GAAIrE,UAAWoE,IAAW,CAAC,YAAY,EAAM,OAAUgI,IAAvE,UACKhO,EAAM4O,MAAQ,sBAAMhN,UAAS,UAAK5B,EAAM4O,KAAX,WAC7B5O,EAAM2O,QAKnB,SAAShH,EAAaC,EAAcC,GAChC,OAAQA,EAAOhG,MACX,IAAK,cACD,OAAO,2BACA+F,GADP,IAEItH,UAAWuH,EAAOC,UAE1B,IAAK,eACD,IAAImH,EAAQ,YAAOrH,EAAM2D,SAYzB,OAXA,YAAI1D,EAAOC,SAAS1D,SAAQ,SAAA4H,GACxB,IAAIjG,EAAQ6B,EAAM2D,QAAQnE,WAAU,SAAAoE,GAAI,OAAIA,EAAKvD,MAAQ+D,EAAO/D,QACjD,IAAXlC,EACAkJ,EAAS7L,KAAK4I,GACbiD,EAASlJ,GAASiG,KAE3BiD,EAASjI,MAAK,SAACC,EAAGC,GAAJ,QACRD,EAAEiI,YAAchI,EAAEgI,UAChBjI,EAAEiI,UAAYhI,EAAEgI,UAChBjI,EAAEgB,IAAMf,EAAEe,QAEX,2BACAL,GADP,IAEI2D,QAAS0D,IAGjB,IAAK,oBACD,IAAIjH,EAAQ,YAAOJ,EAAMG,cAOzB,OANA,YAAIF,EAAOC,SAAS1D,SAAQ,SAAAyH,GACxB,IAAI9F,EAAQ6B,EAAMG,aAAaX,WAAU,SAAA8B,GAAI,OAAIA,EAAKjB,MAAQ4D,EAAY5D,QAC3D,IAAXlC,EACAiC,EAAS5E,KAAKyI,GACb7D,EAASjC,GAAS8F,KAEpB,2BACAjE,GADP,IAEIG,aAAcC,IAGtB,IAAK,mBACD,IAAIiH,EAAQ,YAAOrH,EAAM2D,SAEzB,OADA0D,EAAWA,EAASpL,QAAO,SAAA2H,GAAI,OAAIA,EAAKvD,MAAQJ,EAAOC,WAChD,2BACAF,GADP,IAEI2D,QAAS0D,IAEjB,QAAS,MAAM,IAAI7G,OC1K3B,SAAS+G,EAAT,GAII,IAJoBC,EAIrB,EAJqBA,MAAOnJ,EAI5B,EAJ4BA,GAAI+I,EAIhC,EAJgCA,oBAK3BhB,EAAQC,YAAc,CACxBa,KAAM7I,EACN8I,MAAOC,IAET,OACI,oBAAIpN,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAWoE,IAAW,CACxB,YAAY,EACZ,OAAUgI,IACV/H,GAAIA,EAHR,SAGamJ,MAKVC,MA3Df,SAAerP,GAIX,OACI,qCACI,eAACsP,EAAA,EAAD,CAAKxM,QAAQ,OAAOlB,UAAU,GAA9B,UACI,cAAC0N,EAAA,EAAIC,KAAL,UACI,cAACJ,EAAD,CAAeC,MAAM,UAAUnJ,GAAG,eAEtC,cAACqJ,EAAA,EAAIC,KAAL,UACI,cAACJ,EAAD,CAAeC,MAAM,cAAcnJ,GAAG,oBAE1C,cAACqJ,EAAA,EAAIC,KAAL,UACI,cAACJ,EAAD,CAAeC,MAAM,WAAWnJ,GAAG,kBAG3C,qBAAKrE,UAAU,6CAAf,SACI,eAAC,IAAD,WACQ,cAAC,IAAD,CAAOkN,KAAK,WAAZ,SACI,cAAC,EAAD,CAAanE,SAAU3K,EAAM2K,aAEjC,cAAC,IAAD,CAAOmE,KAAK,gBAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACI,cAACf,EAAD,MAEJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAU9H,GAAG,oBAI7B,qBAAKrE,UAAU,uDAAf,SACI,kFCuDD4N,MAzFf,WAAgB,IAAD,EACsBvP,mBAA0B,MADhD,mBACTwP,EADS,KACIC,EADJ,OAE4BzP,oBAAS,GAFrC,mBAET0P,EAFS,KAEOC,EAFP,OAGU3P,mBAAwB,MAHlC,mBAGTO,EAHS,KAGFC,EAHE,OAIsBR,mBAA+B,SAJrD,mBAITwF,EAJS,KAIIoK,EAJJ,OAKgB5P,oBAAS,WACtC,IAAI6P,GAAU,IAAIC,MAAOC,WACzB,QAASF,GAAW,GAAKA,GAAW,OAPvB,mBAKTG,EALS,KAKCC,EALD,KA4Cd,OAnCA/G,qBAAU,WAITzJ,EAAIwB,IAAI,SAASD,MAAK,SAACE,GACtBuO,EAAevO,EAASE,KAAKA,MAC7BuO,GAAkB,MAChBtO,OAAM,SAACC,GAAwB,IAAD,EAC5BF,EAAI,UAAGE,EAAOJ,gBAAV,aAAG,EAAiBE,MACxBA,GAAyB,kBAAhBA,EAAKG,QAA8C,kBAAhBH,EAAKE,OAE9CqO,GAAkB,GADxBnP,EAAS,sEAGT,IAEH0I,qBAAU,YAET,WAA4B,IAAD,EACtBgH,EAAO1L,SAASiH,eAAe,kBACnC,IAAKyE,EAEJ,YADAC,MAAM,qEAGP,IAAIC,EAAM,UAAGF,EAAKG,aAAa,sBAArB,QAAuC,GAC5CL,EAKJE,EAAKI,aAAa,OAAQF,EAAS,sCAHnCF,EAAKI,aAAa,OAAQF,EAAS,mCAVrCG,KAgBE,CAACP,IAIH,cAAC,IAAD,UACC,sBAAKrO,UAAU,8BAAf,UACC,sBAAKA,UAAU,6BAAf,UACC,oBAAIA,UAAU,WAAd,iDACA,yBAAQA,UAAU,6CAA6CM,QAAS,kBAAMgO,GAAaD,IAA3F,UACEA,GAAY,oBACXA,GAAY,oBAGhB,qBAAKrO,UAAU,gCAAf,4LAIEpB,GAAS,qBAAKoB,UAAU,qBAAf,SAAqCpB,IAE/CmP,GAAkB,sBAAM/N,UAAU,oBAEjC6N,IACDE,GACe,UAAhBlK,GACC,cAAC1F,EAAD,CACCqB,QAAS,SAACqP,GACTf,EAAee,IAEhBtO,aAAc,WAAQ0N,EAAe,gBAIrCJ,IAAgBE,GAAkC,aAAhBlK,GAA8B,cAACrD,EAAD,CAAcD,aAAc,WAAQ0N,EAAe,YAEpHJ,IAAgBE,GAChB,cAAC,EAAD,CACCc,KAAMhB,EACN9E,SAAU,SAACpJ,GACVmO,EAAe,eC1EPgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3P,MAAK,YAAkD,IAA/C4P,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3M,SAASiH,eAAe,SAM1BgF,M","file":"static/js/main.c5bcba06.chunk.js","sourcesContent":["\r\nimport axiosStatic from \"axios\";\r\n\r\nconst API = axiosStatic.create({\r\n    baseURL: \"https://pmail.laurcons.ro/api/\",\r\n    withCredentials: true\r\n});\r\n\r\nexport default API;\r\n","import { AxiosError } from \"axios\";\r\nimport React, { FormEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport API from \"../api\";\r\nimport { UserData } from \"../apiTypes\";\r\n\r\nexport default function LoginForm(props: {\r\n\tonLogin: (user: UserData) => void,\r\n\tonPageSwitch: () => void\r\n}) {\r\n\tlet [username, setUsername] = useState(\"\");\r\n\tlet [password, setPassword] = useState(\"\");\r\n\tlet [isLoading, setIsLoading] = useState(false);\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\r\n\tconst tryAuth = (e: FormEvent) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tlet formData = new FormData();\r\n\t\tformData.append(\"username\", username);\r\n\t\tformData.append(\"password\", password);\r\n\t\tsetIsLoading(true);\r\n\t\tsetError(null);\r\n\t\tAPI.post(\"/login\", formData).then(() => {\r\n\t\t\treturn API.get(\"/user\").then((response) => {\r\n\t\t\t\tprops.onLogin(response.data.data);\r\n\t\t\t});\r\n\t\t}).catch((reason: AxiosError) => {\r\n\t\t\tswitch (reason.response?.data.status) {\r\n\t\t\t\tcase \"user-not-found\":\r\n\t\t\t\t\tsetError(\"Utilizatorul nu a fost găsit!\"); break;\r\n\t\t\t\tcase \"password-invalid\":\r\n\t\t\t\t\tsetError(\"Parola dvs. este incorectă!\"); break;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetError(\"A avut loc o eroare necunoscută: \" + reason.response?.data.status);\r\n\t\t\t}\r\n\t\t}).finally(() => {\r\n\t\t\tsetIsLoading(false);\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={tryAuth} style={{maxWidth: \"480px\"}}>\r\n\t\t\t<h2>Autentificare</h2>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Nume utilizator:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"text\" onChange={(ev) => { setUsername(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Parola:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"password\" onChange={(ev) => { setPassword(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t{ error &&\r\n\t\t\t\t<div className=\"alert alert-danger\">{error}</div>\r\n\t\t\t}\r\n\t\t\t<button className=\"btn btn-primary\" type=\"submit\">\r\n\t\t\t\tAutentificare\r\n\t\t\t\t{isLoading && <span className=\"spinner-border-sm spinner-border ml-2\" />}\r\n\t\t\t</button>\r\n\t\t\t<button className=\"btn btn-secondary\" onClick={props.onPageSwitch}>\r\n\t\t\t\tÎnregistrare\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}","import { AxiosError } from 'axios';\r\nimport React, { FormEvent, useState } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport API from '../api';\r\n\r\nexport default function RegisterForm(props: {\r\n\tonPageSwitch: () => void\r\n}) {\r\n\tlet [username, setUsername] = useState(\"\");\r\n\tlet [password, setPassword] = useState(\"\");\r\n\tlet [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\tlet [success, setSuccess] = useState<string | null>(null);\r\n\tlet [isLoading, setIsLoading] = useState(false);\r\n\treturn (\r\n\t\t<form onSubmit={tryRegister} style={{maxWidth: \"480px\"}}>\r\n\t\t\t<h2>Înregistrare</h2>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Nume utilizator:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"text\" onChange={(ev) => { setUsername(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Parola:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"password\" onChange={(ev) => { setPassword(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label>Confirmă parola:</label>\r\n\t\t\t\t<input className=\"form-control\" type=\"password\" onChange={(ev) => { setConfirmPassword(ev.target.value) }} />\r\n\t\t\t</div>\r\n\t\t\t{ error &&\r\n\t\t\t\t<div className=\"alert alert-danger\">{error}</div>\r\n\t\t\t}\r\n\t\t\t{ success &&\r\n\t\t\t\t<div className=\"alert alert-success\">{success}</div>\r\n\t\t\t}\r\n\t\t\t<button className=\"btn btn-primary\" type=\"submit\">\r\n\t\t\t\tÎnregistrare\r\n\t\t\t\t{isLoading && <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\" className=\"ml-2\" />}\r\n\t\t\t</button>\r\n\t\t\t<button className=\"btn btn-secondary\" onClick={props.onPageSwitch}>\r\n\t\t\t\tAutentificare\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n\r\n\tfunction tryRegister(e: FormEvent) {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (password !== confirmPassword) {\r\n\t\t\tsetError(\"Parolele nu coincid!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (password.trim().length === 0 || username.trim().length === 0) {\r\n\t\t\tsetError(\"Ați lăsat unul dintre câmpuri liber!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// do register\r\n\t\tlet formData = new FormData();\r\n\t\tformData.append(\"username\", username);\r\n\t\tformData.append(\"password\", password);\r\n\t\tsetIsLoading(true);\r\n\t\tAPI.post(\"/register\", formData).then((response) => {\r\n\t\t\t// all's ok!\r\n\t\t\t// props.onPageSwitch();\r\n\t\t\tsetIsLoading(false);\r\n\t\t\tsetError(null);\r\n\t\t\tsetSuccess(\"Te-ai înregistrat cu succes! Mergi spre autentificare.\");\r\n\t\t}).catch((reason: AxiosError) => {\r\n\t\t\tlet status = reason.response?.data.status;\r\n\t\t\tif (status === \"username-not-unique\") {\r\n\t\t\t\tsetError(\"Numele de utilizator există deja! Alegeți altul.\");\r\n\t\t\t} else {\r\n\t\t\t\tsetError(\"A avut loc o eroare necunoscută.\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}","\r\nimport { DestinationData } from \"./apiTypes\";\r\n\r\n/**\r\n * Takes a destination, and produces a multiline string containing a human-readable\r\n * representation of the address of the destination.\r\n */\r\nexport function destinationAddressToString(d: DestinationData) {\r\n    let parts = [];\r\n    let part = [];\r\n    if (d.street)\r\n        part.push(`Str. ${d.street}`);\r\n    if (d.number)\r\n        part.push(`Nr. ${d.number}`);\r\n    parts.push(part);\r\n    part = [];\r\n    if (d.block)\r\n        part.push(`Bloc ${d.block}`);\r\n    if (d.stair)\r\n        part.push(`Scara ${d.stair}`);\r\n    if (d.apartment)\r\n        part.push(`Ap. ${d.apartment}`);\r\n    parts.push(part);\r\n    part = [];\r\n    if (d.locality && d.commune)\r\n        part.push(`Sat ${d.locality}`);\r\n    if (d.locality && !d.commune)\r\n        part.push(`Oraș ${d.locality}`);\r\n    if (d.commune)\r\n        part.push(`Com. ${d.commune}`);\r\n    parts.push(part);\r\n    part = [];\r\n    if (d.county)\r\n        part.push(`Jud. ${d.county}`);\r\n    if (d.postalCode)\r\n        part.push(`Cod poștal ${d.postalCode}`);\r\n    parts.push(part);\r\n    return parts\r\n        .filter(part => part.length > 0)\r\n        .map(part => part.join(', '))\r\n        .join('\\n');\r\n}\r\n\r\n/**\r\n * Takes a key-value object, and returns a corresponding FormData class\r\n * filled with those key-values.\r\n * @param fields The key-value object\r\n * @returns The FormData class\r\n */\r\nexport function formData(fields: {[key: string]: any}) {\r\n    let fd = new FormData();\r\n    Object.keys(fields).forEach(field => {\r\n        fd.append(field, fields[field]);\r\n    });\r\n    return fd;\r\n}\r\n\r\n/**\r\n * Takes an object with key-value pairs, adds them to the current query, then returns the new query.\r\n * @param params The key-value pairs\r\n * @returns The new query: `?key=value&key=value`\r\n */\r\nexport function composeNewQuery(params: {[key: string]: any}) {\r\n    let currentParams = document.location.search\r\n        .substr(1) // returns without leading ?\r\n        .split('&') // returns [\"key1=value1\", \"key2=value2\"]\r\n        .filter(p => p.length !== 0) // removes situations like ?&\r\n        .map(p => ({[p.split('=')[0]]: p.split('=')[1] ?? \"\"})) // returns [{key1: value1}, {key2: value2}]\r\n        .reduce((prev, curr) => Object.assign(prev, curr), {}); // returns {key1: value1, key2: value2}\r\n    Object.assign(currentParams, params);\r\n    return \"?\" +\r\n        Object.keys(currentParams)\r\n        .filter(key => currentParams[key] !== null && currentParams[key] !== undefined)\r\n        .map(key => (\r\n            key + \"=\" + currentParams[key]\r\n        ))\r\n        .join('&');\r\n}\r\n\r\n/**\r\n * Provides a translation table for letter objects. Returns an object, which maps each field\r\n * of a letter to a human-readable string.\r\n */\r\nexport function letterTranslationTable() {\r\n    return {\r\n        code: \"Cod\",\r\n        handwritten: \"De mână\",\r\n        receivedDate: \"Primit\",\r\n        price: \"Preț\",\r\n        observations: \"Observații\",\r\n        writtenDate: \"Scris\",\r\n        sentDate: \"Trimis\"\r\n    };\r\n}\r\n/**\r\n * Provides a translation table for destination objects. Returns an object, which maps each field\r\n * of a letter to a human-readable string.\r\n */\r\nexport function destinationTranslationTable() {\r\n    return {\r\n        name: \"Nume\",\r\n        street: \"Strada\",\r\n        number: \"Numărul\",\r\n        block: \"Bloc\",\r\n        stair: \"Scara\",\r\n        apartment: \"Apartament\",\r\n        locality: \"Localitate\",\r\n        commune: \"Comuna\",\r\n        county: \"Județul\",\r\n        postalCode: \"Cod poștal\",\r\n        observations: \"Observații\"\r\n    };\r\n}\r\n/**\r\n * Provides an order array for letter objects. Returns each relevant key, as strings, in the required order.\r\n */\r\nexport function letterOrderTable() {\r\n    return [\r\n        \"code\",\r\n        \"handwritten\",\r\n        \"writtenDate\",\r\n        \"sentDate\",\r\n        \"receivedDate\",\r\n        \"price\",\r\n        \"observations\"\r\n    ];\r\n}\r\n/**\r\n * Provides an order array for destination objects. Returns each relevant key, as strings, in the required order.\r\n */\r\nexport function destinationOrderTable() {\r\n    return [\r\n        \"name\",\r\n        \"street\",\r\n        \"number\",\r\n        \"block\",\r\n        \"stair\",\r\n        \"apartment\",\r\n        \"locality\",\r\n        \"commune\",\r\n        \"county\",\r\n        \"postalCode\",\r\n        \"observations\"\r\n    ];\r\n}","import classNames from \"classnames\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { composeNewQuery } from \"./utilities\";\r\n\r\nexport default function PaginationControl(props: {\r\n    pages: number;\r\n    currentPage?: number;\r\n    resetQueryParams?: {[key: string]: string};\r\n}) {\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const currentPage = props.currentPage ?? parseInt(query.get(\"p\") ?? \"0\");\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination mb-0 flex-wrap\">\r\n                {Array(props.pages).fill(0).map((val, index) => (\r\n                    <li className={classNames({\"page-item\": true, \"active\": index === currentPage})} key={index}>\r\n                        <Link to={composeNewQuery({p: index.toString()})} className=\"page-link\">\r\n                            {index+1}\r\n                        </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n\r\n}","import classnames from \"classnames\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nexport default function ProperyEditor(props: {\r\n    subject: {[key: string]: any};\r\n    onSubmit: (newVal: {[key: string]: any}) => void;\r\n    onModify?: (newVal: {[key: string]: any}, isOriginal: boolean) => void;\r\n    isHighlighted?: boolean;\r\n    children?: React.ReactElement;\r\n    translationTable: {[key: string]: string};\r\n    orderTable?: string[];\r\n}) {\r\n    let [newSubject, setNewSubject] = useState<typeof props.subject>(Object.assign({}, props.subject));\r\n    let [modified, setModified] = useState(false);\r\n\r\n    function handleModify(prop: string, value: any) {\r\n        let copy = Object.assign({}, newSubject);\r\n        copy[prop] = value;\r\n        modifySubject(copy);\r\n    }\r\n\r\n    function modifySubject(copy: {[key: string]: any}) {\r\n        let modified = Object.keys(props.subject).some((prop) => props.subject[prop] !== copy[prop]);\r\n        setNewSubject(copy);\r\n        setModified(modified);\r\n        props.onModify && props.onModify(copy, !modified);\r\n    }\r\n\r\n    function handleSubmit() {\r\n        props.onSubmit(newSubject);\r\n    }\r\n\r\n    function handleReset() {\r\n        let copy = Object.assign({}, props.subject);\r\n        modifySubject(copy);\r\n    }\r\n\r\n    let differences: string[] =\r\n        Object.keys(props.subject)\r\n        .filter((prop) => props.subject[prop] !== newSubject[prop]);\r\n\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-header\">\r\n                <h5 className=\"card-title\">Detalii</h5>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n                {props.children}\r\n                <table className=\"table table-sm table-bordered mb-0\">\r\n                    <tbody>\r\n                        {Object\r\n                        .keys(newSubject)\r\n                        .sort((a, b) => props.orderTable ? props.orderTable?.findIndex(x => x === a) - props.orderTable?.findIndex(x => x === b) : 0)\r\n                        .map((prop) => {\r\n                            if (!Object.keys(props.translationTable).includes(prop))\r\n                                return null;\r\n                            return (\r\n                                <tr className={classnames({\"bg-danger\": props.isHighlighted && differences.includes(prop) })} key={prop}>\r\n                                    <td>{props.translationTable[prop]}</td>\r\n                                    <td>\r\n                                        <input\r\n                                            className=\"form-control form-control-sm\"\r\n                                            type=\"text\"\r\n                                            value={newSubject[prop] ?? \"\"}\r\n                                            onChange={(ev) => { handleModify(prop, ev.target.value) }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n                {modified && \"Modificat\"}\r\n                <div className=\"btn-group float-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary btn-sm float-right\"\r\n                        onClick={handleReset}\r\n                    >\r\n                        <span className=\"bi-x-circle mr-2\" />\r\n                        Resetează\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary btn-sm float-right\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        <span className=\"bi-check-circle mr-2\" />\r\n                        Salvează\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import classNames from \"classnames\";\r\nimport objectHash from \"object-hash\";\r\nimport React, { Reducer, useEffect, useReducer } from \"react\";\r\nimport { Prompt, useHistory, useLocation } from \"react-router\";\r\nimport API from \"./api\";\r\nimport { DestinationData } from \"./apiTypes\";\r\nimport { composeNewQuery, destinationAddressToString, destinationOrderTable, destinationTranslationTable } from \"./utilities\";\r\nimport PaginationControl from \"./PaginationControl\";\r\nimport PropertyEditor from \"./PropertyEditor\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype State = {\r\n    destinations: DestinationData[];\r\n    entriesPerPage: number;\r\n    isCurrentModified: boolean;\r\n    isPropertyEditorHighlighted: boolean;\r\n    isLoading: boolean;\r\n};\r\ntype Action = \r\n  | { type: \"SET_LOADING\", payload: boolean }\r\n  | { type: \"SET_DESTINATIONS\", payload: DestinationData[] }\r\n  | { type: \"UPDATE_DESTINATION\", payload: DestinationData }\r\n  | { type: \"REMOVE_DESTINATION\", payload: number }\r\n  | { type: \"SET_IS_CURRENT_MODIFIED\", payload: boolean }\r\n  | { type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\", payload: boolean };\r\n\r\nfunction DestinationsPage(props: {\r\n\r\n}) {\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const history = useHistory();\r\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(stateReducer, {\r\n        destinations: [],\r\n        entriesPerPage: 10,\r\n        isCurrentModified: false,\r\n        isPropertyEditorHighlighted: false,\r\n        isLoading: true\r\n    });\r\n\r\n    const totalPages = \r\n        Math.floor(state.destinations.length / state.entriesPerPage) +\r\n        (state.destinations.length % state.entriesPerPage !== 0 ? 1 : 0) +\r\n        (state.destinations.length === 0 ? 1 : 0);\r\n    const toId = query.get(\"toid\") ? parseInt(query.get(\"toid\") ?? \"-1\") : null;\r\n    const currentId = (query.get(\"id\") ? parseInt(query.get(\"id\") ?? \"-1\") : null);\r\n    const currentDest = state.destinations.find(dest => dest._id === currentId);\r\n    const currentPage = parseInt(query.get(\"p\") ?? \"0\");\r\n\r\n    useEffect(() => {\r\n        API.get(\"/destinations\").then((response) => {\r\n            dispatch({\r\n                type: \"SET_DESTINATIONS\",\r\n                payload: response.data.data\r\n            });\r\n            dispatch({\r\n                type: \"SET_LOADING\",\r\n                payload: false\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    if (toId !== null && !state.isLoading) {\r\n        // redirect the user to the proper ID and page number, but only after\r\n        //  the dests have loaded\r\n        let pageNum = Math.floor(\r\n            state.destinations.findIndex(d => d._id === toId) /\r\n            state.entriesPerPage\r\n        );\r\n        history.push(`?p=${pageNum}&id=${toId}`);\r\n    }\r\n\r\n    function handleSwitchRow(id: number) {\r\n        if (state.isCurrentModified) {\r\n            doUnsavedAlert();\r\n        } else {\r\n            const newrow = id === currentId ? null : id.toString();\r\n            history.push(composeNewQuery({id: newrow}));\r\n        }\r\n    }\r\n\r\n    function doUnsavedAlert() {\r\n        dispatch({\r\n            type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n            payload: true\r\n        });\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n                payload: false\r\n            });\r\n        }, 250);\r\n    }\r\n\r\n    function handleAddNew() {\r\n        if (state.isCurrentModified)\r\n            doUnsavedAlert();\r\n        else {\r\n            API.post(\"/destination\").then((response) => {\r\n                dispatch({\r\n                    type: \"UPDATE_DESTINATION\",\r\n                    payload: response.data.data\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleRemove() {\r\n        let res = window.confirm(\"Sunteți sigur că doriți să ștergeți acest destinatar?\\n\" + currentDest?.name);\r\n        if (!res)\r\n            return;\r\n        let formData = new FormData();\r\n        formData.append(\"_method\", \"delete\");\r\n        API.post(`/destination/${currentDest?._id}`, formData).then((response) => {\r\n            dispatch({\r\n                type: \"REMOVE_DESTINATION\",\r\n                payload: currentDest?._id ?? -1\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleUpdate(newSubject: {[key: string]: any}) {\r\n        // send api request and update in memory\r\n        let formData = new FormData();\r\n        let differences: string[] =\r\n            Object.keys(currentDest ?? {})\r\n            .filter((prop) => (currentDest as {[key: string]: any})[prop] !== newSubject[prop]);\r\n        for (let diff of differences) {\r\n            formData.append(diff, newSubject[diff] ?? \"\");\r\n        }\r\n        formData.append(\"_method\", \"patch\");\r\n        API.post(`/destination/${newSubject._id}`, formData).then((response) => {\r\n            // update in memory\r\n            dispatch({\r\n                type: \"UPDATE_DESTINATION\",\r\n                payload: newSubject as DestinationData\r\n            });\r\n            dispatch({\r\n                type: \"SET_IS_CURRENT_MODIFIED\",\r\n                payload: false\r\n            });\r\n        });\r\n    }\r\n\r\n    if (state.isLoading) {\r\n        return (\r\n            <span className=\"spinner spinner-border\"></span>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Prompt when={state.isCurrentModified} message={\"Aveți modificări nesalvate! Sunteți sigur că doriți să părăsiți pagina?\"}  />\r\n            <div className=\"row\">\r\n                <div className={currentDest ? \"col-md-8\" : \"col-12\"}>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <div className=\"mr-2\">\r\n                            <button className=\"btn btn-primary\" onClick={handleAddNew}>\r\n                                <span className=\"bi-person-plus mr-2\" />\r\n                                Adaugă destinatar\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"overflow-scroll\">\r\n                            <PaginationControl pages={totalPages} currentPage={currentPage}/>\r\n                        </div>\r\n                    </div>\r\n                    <table className=\"table table-bordered table-hover table-responsive-md\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Nume</th>\r\n                                <th>Adresa</th>\r\n                                <th>Observații</th>\r\n                                { !currentDest && <th>Opțiuni</th>}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {state.destinations\r\n                            .sort((a, b) => a.name > b.name ? 1 : -1)\r\n                            .slice(state.entriesPerPage * currentPage, state.entriesPerPage * currentPage + state.entriesPerPage)\r\n                            .map((dest, index) => (\r\n                                <tr\r\n                                    className={classNames({\r\n                                        \"table-active\": dest._id === currentId && !state.isCurrentModified,\r\n                                        \"table-warning\": dest._id === currentId && state.isCurrentModified\r\n                                    })}\r\n                                    style={{cursor: \"pointer\"}}\r\n                                    key={objectHash(dest)}\r\n                                >\r\n                                    <td key={dest.name}\r\n                                        onClick={() => handleSwitchRow(dest._id)}\r\n                                    >\r\n                                        <span className=\"badge badge-danger\">{currentPage * state.entriesPerPage + index+1}</span>\r\n                                        <span className=\"badge badge-info\">{dest._id}</span>\r\n                                        &nbsp;\r\n                                        {dest.name}\r\n                                    </td>\r\n                                    <td key={index+\"-1\"}\r\n                                        onClick={() => handleSwitchRow(dest._id)}\r\n                                    >\r\n                                        {destinationAddressToString(dest).split(\"\\n\").map(row => <>{row}<br /></>)}\r\n                                    </td>\r\n                                    <td key={index+\"-2\"}\r\n                                        onClick={() => handleSwitchRow(dest._id)}\r\n                                    >\r\n                                        {dest.observations}\r\n                                    </td>\r\n                                    { !currentDest &&\r\n                                    <td>\r\n                                        <Link\r\n                                            className=\"btn btn-primary btn-sm mb-2\"\r\n                                            to={\"/letters/all?d=\" + dest._id}\r\n                                        >\r\n                                            <span className=\"bi-table mr-2\" />\r\n                                            Toate scrisorile destinatarului\r\n                                        </Link>\r\n                                    </td>\r\n                                    }\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"overflow-scroll\">\r\n                        <PaginationControl pages={totalPages} currentPage={currentPage}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col\">\r\n                    { currentDest && <>\r\n                        <div className=\"card mb-2\">\r\n                            <div className=\"card-header\">\r\n                                <h5 className=\"card-title\">Opțiuni</h5>\r\n                            </div>\r\n                            <div className=\"card-body d-flex flex-column\">\r\n                                <Link\r\n                                    className=\"btn btn-primary btn-sm mb-2\"\r\n                                    to={\"/letters/all?d=\" + currentDest._id}\r\n                                >\r\n                                    <span className=\"bi-table mr-2\" />\r\n                                    Toate scrisorile destinatarului\r\n                                </Link>\r\n                                <button className=\"btn btn-outline-danger btn-sm\" onClick={handleRemove}>\r\n                                    <span className=\"bi-person-dash mr-2\" />\r\n                                    Șterge destinatar\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <PropertyEditor\r\n                            subject={currentDest ?? {}}\r\n                            onSubmit={handleUpdate}\r\n                            onModify={(newVal, isOriginal) => {\r\n                                dispatch({\r\n                                    type: \"SET_IS_CURRENT_MODIFIED\",\r\n                                    payload: !isOriginal\r\n                                });\r\n                            }}\r\n                            isHighlighted={state.isPropertyEditorHighlighted}\r\n                            key={objectHash(currentDest)}\r\n                            translationTable={destinationTranslationTable()}\r\n                            orderTable={destinationOrderTable()}\r\n                        />\r\n                    </>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction stateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case \"SET_DESTINATIONS\":\r\n            return {\r\n                ...state,\r\n                destinations: action.payload\r\n            };\r\n        case \"UPDATE_DESTINATION\":\r\n            let newDests = [...state.destinations];\r\n            let index = newDests.findIndex(d => d._id === action.payload._id);\r\n            if (index !== -1) {\r\n                newDests[index] = action.payload;\r\n            } else {\r\n                newDests.push(action.payload);\r\n            }\r\n            return {\r\n                ...state,\r\n                destinations: newDests\r\n            };\r\n        case \"REMOVE_DESTINATION\":\r\n            return {\r\n                ...state,\r\n                destinations: state.destinations.filter(d => d._id !== action.payload)\r\n            };\r\n        case \"SET_IS_CURRENT_MODIFIED\":\r\n            return {\r\n                ...state,\r\n                isCurrentModified: action.payload\r\n            };\r\n        case \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\":\r\n            return {\r\n                ...state,\r\n                isPropertyEditorHighlighted: action.payload\r\n            };\r\n        default: throw new Error(\"Invalid action\");\r\n    }\r\n}\r\n\r\nexport default DestinationsPage;","import { useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport API from \"./api\";\r\n\r\nfunction GeneralPage(props: {\r\n    onLogout: (reason?: string) => void\r\n}) {\r\n\r\n    let [changelogShow, setChangelogShow] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <p>Bine ați venit în Managerul de Poștă Fizică!</p>\r\n            <p>\r\n                Acesta reprezintă proiectul lui Pricop Laurențiu pentru Atestatul de sfârșit de clasa a XII-a. Însă, am dorit să fac această aplicație capabilă\r\n                de a fi hostată public, și probabil va primi actualizări de-a lungul timpului!\r\n            </p>\r\n            <p>\r\n                Versiunea aplicației: v1.2<br />\r\n                <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => setChangelogShow(true)}>Changelog</button>\r\n            </p>\r\n            <Button variant=\"secondary\" onClick={logout}>\r\n                Deautentificare\r\n            </Button>\r\n            <Modal show={changelogShow} onHide={() => setChangelogShow(false)} scrollable>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Log de schimbări</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Versiunea v1.2</h4>\r\n                    <ul className=\"list-group mb-3\">\r\n                        <li className=\"list-group-item bi-plus\">\r\n                            &nbsp;S-au adăugat iconițe pe majoritatea butoanelor aplicației\r\n                        </li>\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;Linkurile care trimit de la destinatar la scrisori sau invers acum funcționează corect în toate circumstanțele\r\n                        </li>\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;S-au reparat probleme de pe pagina de autentificare/înregistrare\r\n                        </li>\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;Ordinea câmpurilor în editorul de scrisori este acum logică\r\n                        </li>\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;Vizualizarea grupată a scrisorilor este acum mai ușor și logic de navigat\r\n                        </li>\r\n                    </ul>\r\n                    <h4>Versiunea v1.1</h4>\r\n                    <ul className=\"list-group\">\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;Linkurile care trimit de la destinatar la scrisori sau invers acum funcționează corect în toate circumstanțele\r\n                        </li>\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;„Toate scrisorile destinatarului” de pe pagina Destinatari acum trimite la vizualizarea Tabel a scrisorilor\r\n                        </li>\r\n                        <li className=\"list-group-item bi-plus\">\r\n                            &nbsp;Pagina cu scrisorile grupate acum afișează mesaje de eroare relevante\r\n                        </li>\r\n                        <li className=\"list-group-item bi-check\">\r\n                            &nbsp;Pagina cu scrisorile tabelate acum reacționează mai bine în timpul filtrării\r\n                        </li>\r\n                        <li className=\"list-group-item bi-plus\">\r\n                            &nbsp;Pagina cu scrisorile grupate acum afișează „(fără)” dacă codul scrisorii nu este completat\r\n                        </li>\r\n                    </ul>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <div className=\"btn btn-primary\" onClick={() => setChangelogShow(false)}>\r\n                        Închide\r\n                    </div>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n    function logout() {\r\n        API.post(\"/logout\").then(() => {\r\n            props.onLogout(\"user-initiated\");\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default GeneralPage;","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DestinationData, LetterData, LetterType } from \"../apiTypes\";\r\n\r\n\r\nexport default function LettersCategorizedSubpage(props: {\r\n    destinations: DestinationData[];\r\n    letters: LetterData[];\r\n    onAddNew: (type: LetterType, destId: number) => void;\r\n    onModify: (newSubject: {[key: string]: string}, currentLetter: LetterData) => Promise<void>;\r\n    onRemove: (letterData: LetterData) => void;\r\n}) {\r\n\r\n    const history = useHistory();\r\n    const query = new URLSearchParams(window.location.search);\r\n    const currentId = query.get(\"id\") ? parseInt(query.get(\"id\") ?? \"0\") : null;\r\n    const toId = query.get(\"toid\") ? parseInt(query.get(\"toid\") ?? \"0\") : null;\r\n    const validDestinations = \r\n        props.destinations\r\n        .filter(dest => props.letters.map(lett => lett.destinationId).includes(dest._id))\r\n        .sort((a, b) => a.name > b.name ? 1 : -1);\r\n\r\n    useEffect(() => {\r\n        document.getElementById(\"id_\" + currentId)?.scrollIntoView({\r\n            behavior: \"smooth\"\r\n        });\r\n    }, [currentId]);\r\n\r\n    if (toId !== null) {\r\n        history.push(`?id=${toId}`);\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { (currentId !== null && !validDestinations.map(d => d._id).includes(currentId ?? -1)) &&\r\n            <div className=\"alert alert-danger\">\r\n            {(() => {\r\n                const dest = props.destinations.find(d => d._id === currentId);\r\n                return <>\r\n                    Destinatarul {dest?.name ?? \"dorit\"} nu are nicio scrisoare asociată, așadar nu se află în această listă.\r\n                </>;\r\n            })()}\r\n            </div>\r\n            }\r\n            { validDestinations\r\n            .map((destination, index) => {\r\n                const letters = props.letters.filter(lett => lett.destinationId === destination._id);\r\n                const incomingLetters = letters.filter(lett => lett.type === \"incoming\");\r\n                const outgoingLetters = letters.filter(lett => lett.type === \"outgoing\");\r\n                return <>\r\n                    <div className=\"card mb-3\" key={destination._id}>\r\n                        <div className=\"card-header position-relative\">\r\n                            <h5 className=\"card-title d-inline\" id={\"id_\" + destination._id}>\r\n                                <span className=\"badge badge-danger\">{index+1}</span>\r\n                                <span className=\"badge badge-info mr-2\">{destination._id}</span>\r\n                                <span className=\"bi-person mr-2\" />\r\n                                {destination.name}\r\n                                <span className=\"badge badge-info ml-2\">{letters.length} scrisori</span>\r\n                            </h5>\r\n                            { currentId === destination._id ?\r\n                                <Link className=\"btn btn-primary float-right stretched-link\" to=\"?\">\r\n                                    <span className=\"bi-caret-up mr-2\" />\r\n                                    Ascunde\r\n                                </Link>\r\n                                :\r\n                                <Link className=\"btn btn-primary float-right stretched-link\" to={\"?id=\" + destination._id}>\r\n                                    <span className=\"bi-caret-down mr-2\" />\r\n                                    Arată\r\n                                </Link>\r\n                            }\r\n                        </div>\r\n                        { currentId === destination._id &&\r\n                        <div className=\"card-body\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md\">\r\n                                    <h5>Primite</h5>\r\n                                    <table className=\"table table-striped table-bordered table-hover table-sm table-responsive-md\">\r\n                                        <thead><tr>\r\n                                            <th>Cod</th>\r\n                                            <th>Primită la</th>\r\n                                            <th>De mână?</th>\r\n                                            <th>Observații</th>\r\n                                        </tr></thead>\r\n                                        <tbody>\r\n                                        { incomingLetters.map((letter, index) => (\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <span className=\"badge badge-danger\">{index+1}</span>\r\n                                                    <span className=\"badge badge-info mr-2\">{letter._id}</span>\r\n                                                    <Link to={\"/letters/all?toid=\"+letter._id}>\r\n                                                        {letter.code.length !== 0 ? letter.code : \"(fără)\"}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>{letter.receivedDate}</td>\r\n                                                <td>{letter.handwritten}</td>\r\n                                                <td>{letter.observations}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        { incomingLetters.length === 0 &&\r\n                                        <tr>\r\n                                            <td colSpan={4}>\r\n                                                <span className=\"bi-x-circle mr-2\" />\r\n                                                Nu sunt scrisori.\r\n                                            </td>\r\n                                        </tr>\r\n                                        }\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                                <div className=\"col-md\">\r\n                                    <h5>Trimise</h5>\r\n                                    <table className=\"table table-striped table-bordered table-hover table-sm table-responsive-md\">\r\n                                        <thead><tr>\r\n                                            <th>Cod</th>\r\n                                            <th>Traseu</th>\r\n                                            <th>De mână?</th>\r\n                                            <th>Observații</th>\r\n                                        </tr></thead>\r\n                                        <tbody>\r\n                                        { outgoingLetters.map((letter, index) => (\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <span className=\"badge badge-danger\">{index+1}</span>\r\n                                                    <span className=\"badge badge-info mr-2\">{letter._id}</span>\r\n                                                    <Link to={\"/letters/all?toid=\"+letter._id}>\r\n                                                        {letter.code.length !== 0 ? letter.code : \"(fără)\"}\r\n                                                    </Link>\r\n                                                </td>\r\n                                                <td>\r\n                                                    { letter.writtenDate && <>Scrisă: {letter.writtenDate}<br /></> }\r\n                                                    { letter.sentDate && <>Trimisă: {letter.sentDate}<br /></> }\r\n                                                    { letter.receivedDate && <>Primită: {letter.receivedDate}<br /></> }\r\n                                                </td>\r\n                                                <td>{letter.handwritten}</td>\r\n                                                <td>{letter.observations}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        { outgoingLetters.length === 0 &&\r\n                                        <tr>\r\n                                            <td colSpan={4}>\r\n                                                <span className=\"bi-x-circle mr-2\" />\r\n                                                Nu sunt scrisori.\r\n                                            </td>\r\n                                        </tr>\r\n                                        }\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </>;\r\n            })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n","import { FormEvent, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { DestinationData, LetterType } from \"../apiTypes\";\r\n\r\nexport default function NewLetterModal(props: {\r\n    show: boolean;\r\n    onHide: () => void;\r\n    onSubmit: (type: LetterType, destinationId: number) => void;\r\n    destinations: DestinationData[]\r\n}) {\r\n    let [letterType, setLetterType] = useState<LetterType>(\"incoming\");\r\n    let [destination, setDestination] = useState<number>(-1);\r\n\r\n    function isValid() {\r\n        return destination !== -1;\r\n    }\r\n\r\n    function handleSubmit(ev: FormEvent) {\r\n        ev.preventDefault();\r\n        props.onSubmit(letterType, destination);\r\n    }\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.onHide}>\r\n            <form onSubmit={handleSubmit}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Adaugă scrisoare nouă</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <>\r\n                        <div className=\"form-group\">\r\n                            <label>Tip scrisoare:</label>\r\n                            <select className=\"form-control\" value={letterType} onChange={ev => setLetterType(ev.target.value as LetterType)}>\r\n                                <option value=\"incoming\">Primită</option>\r\n                                <option value=\"outgoing\">Trimisă</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>{letterType === \"incoming\" ? \"Expeditor:\" : \"Destinatar:\"}</label>\r\n                            <select className=\"form-control\" value={destination ?? 0} onChange={ev => setDestination(parseInt(ev.target.value))}>\r\n                                <option value={-1} key={-1} disabled={true}>Selectează...</option>\r\n                                {props.destinations.map(dest => (\r\n                                    <option value={dest._id} key={dest._id}>\r\n                                        {dest.name}, {dest.street} {dest.number}, {dest.locality} {dest.commune} {dest.postalCode}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <p>Acestea reprezintă datele necesare pentru crearea unei scrisori. Celelalte date pot fi adăugate ulterior.</p>\r\n                    </>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <button className=\"btn btn-outline-primary\" type=\"button\" onClick={props.onHide}>Anulează</button>\r\n                    <button className=\"btn btn-primary\" type=\"submit\" disabled={!isValid()}>Adaugă</button>\r\n                </Modal.Footer>\r\n            </form>\r\n        </Modal>\r\n    );\r\n}","import classNames from \"classnames\";\r\nimport objectHash from \"object-hash\";\r\nimport { useReducer } from \"react\";\r\nimport { Prompt, useHistory, useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DestinationData, LetterData, LetterType } from \"../apiTypes\";\r\nimport PaginationControl from \"../PaginationControl\";\r\nimport ProperyEditor from \"../PropertyEditor\";\r\nimport { composeNewQuery, letterOrderTable, letterTranslationTable } from \"../utilities\";\r\nimport NewLetterModal from \"./NewLetterModal\";\r\n\r\ntype State = {\r\n    entriesPerPage: number;\r\n    isAddNewModalShown: boolean;\r\n    isCurrentModified: boolean;\r\n    isPropertyEditorHighlighted: boolean;\r\n};\r\ntype Action = \r\n  | { type: \"SET_ADD_NEW_MODAL_SHOWN\", payload: boolean }\r\n  | { type: \"SET_IS_CURRENT_MODIFIED\", payload: boolean }\r\n  | { type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\", payload: boolean }\r\n\r\nexport default function LettersTableSubpage(props: {\r\n    destinations: DestinationData[];\r\n    letters: LetterData[];\r\n    onAddNew: (type: LetterType, destId: number) => void;\r\n    onModify: (newSubject: {[key: string]: string}, currentLetter: LetterData) => Promise<void>;\r\n    onRemove: (letterData: LetterData) => void;\r\n}) {\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    const currentPage = parseInt(query.get(\"p\") ?? \"0\");\r\n    const currentId = query.get(\"id\") ? parseInt(query.get(\"id\") ?? \"0\") : null;\r\n    const toId = query.get(\"toid\") ? parseInt(query.get(\"toid\") ?? \"0\") : null;\r\n    const [state, dispatch] = useReducer(stateReducer, {\r\n        entriesPerPage: 10,\r\n        isAddNewModalShown: false,\r\n        isCurrentModified: false,\r\n        isPropertyEditorHighlighted: false\r\n    });\r\n    const history = useHistory();\r\n    const destinationFilter = query.get(\"d\") ? parseInt(query.get(\"d\") ?? \"-1\") : null;\r\n    const typeFilter = (query.get(\"t\") !== \"null\" ? (query.get(\"t\") ?? null) : null);\r\n    const filteredLetters = props.letters.filter(lett => {\r\n        let res = true;\r\n        if (typeFilter !== null)\r\n            res = res && lett.type === typeFilter;\r\n        if (destinationFilter !== null)\r\n            res = res && lett.destinationId === destinationFilter;\r\n        return res;\r\n    });\r\n    const totalPages = \r\n        Math.floor(filteredLetters.length / state.entriesPerPage) +\r\n        (filteredLetters.length % state.entriesPerPage !== 0 ? 1 : 0);\r\n    const currentLetter = filteredLetters.find(lett => lett._id === currentId) ?? null;\r\n\r\n    if (toId !== null) {\r\n        // calculate page number and redirect\r\n        let pageNum = Math.floor(\r\n            filteredLetters.findIndex(l => l._id === toId) /\r\n            state.entriesPerPage\r\n        );\r\n        // preserve filter params\r\n        history.push(composeNewQuery({\r\n            toid: null,\r\n            id: toId,\r\n            p: pageNum\r\n        }));\r\n        return null;\r\n    }\r\n\r\n    function handleAddNew(type: LetterType, destId: number) {\r\n        handleAddNewModalVisibility(false);\r\n        props.onAddNew(type, destId);\r\n    }\r\n\r\n    function handleAddNewModalVisibility(newVis: boolean) {\r\n        dispatch({\r\n            type: \"SET_ADD_NEW_MODAL_SHOWN\",\r\n            payload: newVis\r\n        });\r\n    }\r\n\r\n    function handleSwitchRow(newId: number) {\r\n        let id: string | null;\r\n        if (state.isCurrentModified) {\r\n            dispatch({\r\n                type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n                payload: true\r\n            });\r\n            setTimeout(() => {\r\n                dispatch({\r\n                    type: \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\",\r\n                    payload: false\r\n                });\r\n            }, 500);\r\n            return;\r\n        }\r\n        if (currentId === newId)\r\n            id = null;\r\n        else id = newId.toString();\r\n        history.push(composeNewQuery({id}));\r\n    }\r\n\r\n    function handleSubmit(newSubject: {[key: string]: any}) {\r\n        if (!currentLetter)\r\n            return;\r\n        props.onModify(newSubject, currentLetter).then(() => {\r\n            dispatch({\r\n                type: \"SET_IS_CURRENT_MODIFIED\",\r\n                payload: false\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleRemove() {\r\n        currentLetter && props.onRemove(currentLetter);\r\n    }\r\n\r\n    function retrieveDest(destId: number) {\r\n        return props.destinations.find(dest => dest._id === destId);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Prompt when={state.isCurrentModified} message={\"Aveți modificări nesalvate! Sunteți sigur că doriți să părăsiți pagina?\"} />\r\n            <NewLetterModal\r\n                destinations={props.destinations}\r\n                show={state.isAddNewModalShown}\r\n                onHide={() => handleAddNewModalVisibility(false)}\r\n                onSubmit={handleAddNew}\r\n            />\r\n            <div className=\"row\">\r\n                <div className={classNames({\"col-md-8\": currentLetter, \"col-md-12\": !currentLetter})}>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <div className=\"mr-2\">\r\n                            <button className=\"btn btn-primary\" onClick={() => handleAddNewModalVisibility(true)}>\r\n                                <span className=\"bi-file-plus mr-2\" />\r\n                                Adaugă scrisoare\r\n                            </button>\r\n                        </div>\r\n                        <PaginationControl pages={totalPages} />\r\n                    </div>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <div className=\"btn-group mr-2\">\r\n                            <button className={classNames({\r\n                                \"btn\": true,\r\n                                \"btn-outline-primary\": typeFilter !== \"incoming\",\r\n                                \"btn-primary\": typeFilter === \"incoming\"\r\n                            })} onClick={() => {\r\n                                if (typeFilter === \"incoming\")\r\n                                    history.push(composeNewQuery({t: null}));\r\n                                else history.push(composeNewQuery({t: \"incoming\"}));\r\n                            }}>\r\n                                <span className=\"bi-file-arrow-down mr-2\" />\r\n                                Numai primite\r\n                            </button>\r\n                            <button className={classNames({\r\n                                \"btn\": true,\r\n                                \"btn-outline-primary\": typeFilter !== \"outgoing\",\r\n                                \"btn-primary\": typeFilter === \"outgoing\"\r\n                            })} onClick={() => {\r\n                                if (typeFilter === \"outgoing\")\r\n                                    history.push(composeNewQuery({t: null}));\r\n                                else history.push(composeNewQuery({t: \"outgoing\"}));\r\n                            }}>\r\n                                <span className=\"bi-file-arrow-up mr-2\" />\r\n                                Numai trimise\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"form-group m-0\">\r\n                            <select\r\n                                className=\"form-control\"\r\n                                value={destinationFilter ?? -1}\r\n                                onChange={(ev) => {\r\n                                    history.push(composeNewQuery({d: (ev.target.value !== \"-1\") ? ev.target.value : null}));\r\n                                }}\r\n                            >\r\n                                <option value={-1} key={-1}>Toți destinatarii</option>\r\n                                    {destinationFilter && !filteredLetters.map(l => l.destinationId).includes(destinationFilter) &&\r\n                                        <option value={destinationFilter} key={destinationFilter}>Numai {retrieveDest(destinationFilter)?.name ?? \"(negăsit)\"}</option>\r\n                                    }\r\n                                    {props.destinations\r\n                                    .filter(dest => props.letters.map(lett => lett.destinationId).includes(dest._id))\r\n                                    .map(dest => (\r\n                                        <option value={dest._id} key={dest._id}>Numai {dest.name}</option>\r\n                                    ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <table className={classNames({\r\n                        \"table table-bordered table-hover table-responsive-md\": true,\r\n                        \"d-none d-md-table\": currentLetter\r\n                    })}>\r\n                        <thead><tr>\r\n                            <th>Cod</th>\r\n                            <th>Pentru/De la</th>\r\n                            <th>Tip</th>\r\n                            <th>Detalii</th>\r\n                            <th>Observații</th>\r\n                            {!currentLetter && <th>Opțiuni</th>}\r\n                        </tr></thead>\r\n                        <tbody>\r\n                            {filteredLetters.length === 0 &&\r\n                            <tr>\r\n                                <td colSpan={6}>Nu există scrisori {filteredLetters.length !== props.letters.length && \"cu filtrele selectate\"}.</td>\r\n                            </tr>\r\n                            }\r\n                            {filteredLetters\r\n                            .slice(state.entriesPerPage * currentPage, state.entriesPerPage * currentPage + state.entriesPerPage)\r\n                            .map((letter, index) => (\r\n                                <tr\r\n                                    key={letter._id}\r\n                                    className={classNames({\r\n                                        \"table-active\": currentId === letter._id && !state.isCurrentModified,\r\n                                        \"table-warning\": currentId === letter._id && state.isCurrentModified\r\n                                    })}\r\n                                >\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        <span className=\"badge badge-danger\">{currentPage * state.entriesPerPage + index+1}</span>\r\n                                        <span className=\"badge badge-info\">{letter._id}</span>\r\n                                        &nbsp;\r\n                                        {letter.code}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        {retrieveDest(letter.destinationId)?.name}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        {letter.type === \"incoming\" ? <>\r\n                                            <span className=\"bi-arrow-down mr-2\" />\r\n                                            Primită\r\n                                        </> : <>\r\n                                            <span className=\"bi-arrow-up mr-2\" />\r\n                                            Trimisă\r\n                                        </>}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >\r\n                                        {letter.handwritten && <>De mână: {letter.handwritten}<br /></>}\r\n                                        {letter.type === \"outgoing\" && <>\r\n                                            {letter.writtenDate && <>Scrisă: {letter.writtenDate}<br /></>}\r\n                                            {letter.sentDate && <>Trimisă: {letter.sentDate}<br /></>}\r\n                                        </>}\r\n                                        {letter.receivedDate && <>Primită: {letter.receivedDate}<br /></>}\r\n                                        {letter.price && <>Preț: {letter.price}</>}\r\n                                    </td>\r\n                                    <td\r\n                                        style={{cursor: \"pointer\"}}\r\n                                        onClick={() => handleSwitchRow(letter._id)}\r\n                                    >{letter.observations}</td>\r\n                                    { !currentLetter &&\r\n                                    <td>\r\n                                        <Link\r\n                                            className=\"btn btn-primary btn-sm mb-2 mr-2\"\r\n                                            to={\"/letters/group?id=\" + retrieveDest(letter.destinationId)?._id + \"#id_\" + retrieveDest(letter.destinationId)?._id}>\r\n                                            <span className=\"bi-card-list mr-2\" />\r\n                                            Toate scrisorile\r\n                                        </Link>\r\n                                        <Link\r\n                                            className=\"btn btn-primary btn-sm mb-2 mr-2\"\r\n                                            to={\"/destinations?toid=\" + retrieveDest(letter.destinationId)?._id}>\r\n                                            <span className=\"bi-person mr-2\" />\r\n                                            Detalii destinatar\r\n                                        </Link>\r\n                                    </td>\r\n                                    }\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <PaginationControl pages={totalPages} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    { currentLetter && <>\r\n                    <div className=\"card mb-2 d-md-none\">\r\n                        <div className=\"card-header\">\r\n                            <h5 className=\"card-title\">\r\n                                Scrisoarea curentă\r\n                            </h5>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            {currentLetter.type === \"incoming\" ? \"Expeditor\" : \"Destinatar\"}:&nbsp;\r\n                            {retrieveDest(currentLetter.destinationId)?.name}<br />\r\n                            Tip: {currentLetter.type === \"incoming\" ? \"Primită\" : \"Trimisă\"}\r\n                            <button\r\n                                className=\"btn btn-primary btn-block\"\r\n                                onClick={() => {\r\n                                    history.push(composeNewQuery({id: null}));\r\n                                }}\r\n                            >\r\n                                Înapoi la lista scrisorilor\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card mb-2\">\r\n                        <div className=\"card-header\">\r\n                            <h5 className=\"card-title\">Opțiuni</h5>\r\n                        </div>\r\n                        <div className=\"card-body d-flex flex-column\">\r\n                            <Link\r\n                                className=\"btn btn-primary btn-sm mb-2\"\r\n                                to={\"/letters/group?id=\" + retrieveDest(currentLetter.destinationId)?._id + \"#id_\" + retrieveDest(currentLetter.destinationId)?._id}>\r\n                                <span className=\"bi-card-list mr-2\" />\r\n                                Toate scrisorile destinatarului\r\n                            </Link>\r\n                            <Link\r\n                                className=\"btn btn-primary btn-sm mb-2\"\r\n                                to={\"/destinations?toid=\" + retrieveDest(currentLetter.destinationId)?._id}>\r\n                                <span className=\"bi-person mr-2\" />\r\n                                Detalii destinatar\r\n                            </Link>\r\n                            <button\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                                onClick={handleRemove}\r\n                            >\r\n                                <span className=\"bi-file-minus mr-2\" />\r\n                                Șterge scrisoare\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <ProperyEditor\r\n                        subject={currentLetter}\r\n                        onModify={(newObj, isOriginal) => {\r\n                            dispatch({\r\n                                type: \"SET_IS_CURRENT_MODIFIED\",\r\n                                payload: !isOriginal\r\n                            });\r\n                        }}\r\n                        onSubmit={handleSubmit}\r\n                        translationTable={letterTranslationTable()}\r\n                        orderTable={letterOrderTable()}\r\n                        isHighlighted={state.isPropertyEditorHighlighted}\r\n                        key={objectHash(currentLetter)}\r\n                    />\r\n                    </>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction stateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case \"SET_ADD_NEW_MODAL_SHOWN\":\r\n            return {\r\n                ...state,\r\n                isAddNewModalShown: action.payload\r\n            };\r\n        case \"SET_IS_CURRENT_MODIFIED\":\r\n            return {\r\n                ...state,\r\n                isCurrentModified: action.payload\r\n            };\r\n        case \"SET_IS_PROPERTY_EDITOR_HIGHLIGHTED\":\r\n            return {\r\n                ...state,\r\n                isPropertyEditorHighlighted: action.payload\r\n            };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}","import classNames from \"classnames\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport { Link, Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport API from \"../api\";\r\nimport { DestinationData, LetterData, LetterType } from \"../apiTypes\";\r\nimport { formData } from \"../utilities\";\r\nimport LettersCategorizedSubpage from \"./LettersCategorizedSubpage\";\r\nimport LettersTableSubpage from \"./LettersTableSubpage\";\r\n\r\ninterface State {\r\n    isLoading: boolean;\r\n    letters: LetterData[];\r\n    destinations: DestinationData[];\r\n}\r\n\r\ntype Action =\r\n    | { type: \"SET_LOADING\"; payload: boolean; }\r\n    | { type: \"PUSH_LETTERS\", payload: LetterData[] }\r\n    | { type: \"PUSH_DESTINATIONS\", payload: DestinationData[] }\r\n    | { type: \"REMOVE_LETTERS\", payload: LetterData[] }\r\n    | { type: \"REMOVE_LETTER_ID\", payload: number };\r\n\r\n    \r\nexport default function LettersPageRouter() {\r\n    let match = useRouteMatch();\r\n    let [state, dispatch] = useReducer(stateReducer, {\r\n        isLoading: true,\r\n        letters: [],\r\n        destinations: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            API.get(\"/letters\").then(response => {\r\n                const letters = response.data.letters as LetterData[];\r\n                dispatch({\r\n                    type: \"PUSH_LETTERS\",\r\n                    payload: letters\r\n                });\r\n            }),\r\n            API.get(\"/destinations\").then(response => {\r\n                const dests = response.data.data as DestinationData[];\r\n                dispatch({\r\n                    type: \"PUSH_DESTINATIONS\",\r\n                    payload: dests.sort((a, b) => a.name > b.name ? 1 : -1)\r\n                });\r\n            })\r\n        ]).then(() => {\r\n            dispatch({\r\n                type: \"SET_LOADING\",\r\n                payload: false\r\n            })\r\n        });\r\n    }, []);\r\n\r\n    function handleAddNew(type: LetterType, destId: number) {\r\n        Promise.all([\r\n            API.post(\"/letter\", formData({\r\n                type,\r\n                destinationId: destId\r\n            })),\r\n            (state.destinations.map(dest => dest._id).includes(destId)) ? undefined :\r\n            API.get(\"/destination/\" + destId).then(response => {\r\n                dispatch({\r\n                    type: \"PUSH_DESTINATIONS\",\r\n                    payload: [response.data.data]\r\n                });\r\n            })\r\n        ]).then(result => {\r\n            dispatch({\r\n                type: \"PUSH_LETTERS\",\r\n                payload: [result[0].data.letter]\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleModify(newSubject: {[key: string]: any}, currentLetter: LetterData) {\r\n        let newLetter = newSubject as LetterData;\r\n        // send patch request then update DOM\r\n        let formData = new FormData();\r\n        let differences: string[] =\r\n            Object.keys(currentLetter ?? {})\r\n            .filter((prop) => (currentLetter as {[key: string]: any})[prop] !== newSubject[prop]);\r\n        for (let diff of differences) {\r\n            formData.append(diff, newSubject[diff] ?? \"\");\r\n        }\r\n        formData.append(\"_method\", \"patch\");\r\n        return API.post(\"/letter/\" + newLetter._id, formData)\r\n        .then(response => {\r\n            dispatch({\r\n                type: \"PUSH_LETTERS\",\r\n                payload: [response.data.letter]\r\n            });\r\n        });\r\n    }\r\n\r\n    function handleRemove(currentLetter: LetterData) {\r\n        if (!window.confirm(\"Sunteți sigur că doriți să ștergeți scrisoarea?\\nNumele: \" + retrieveDest(currentLetter?.destinationId ?? -1)?.name))\r\n            return;\r\n        API.post(\"/letter/\" + currentLetter?._id, formData({\r\n            _method: \"delete\"\r\n        })).then(response => {\r\n            dispatch({\r\n                type: \"REMOVE_LETTER_ID\",\r\n                payload: response.data.letter._id\r\n            });\r\n        });\r\n    }\r\n\r\n    function retrieveDest(destId: number) {\r\n        return state.destinations.find(dest => dest._id === destId);\r\n    }\r\n\r\n    if (state.isLoading) {\r\n        return <>\r\n            <span className=\"spinner-border\"></span>\r\n        </>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ul className=\"nav nav-pills mb-2\">\r\n                <li className=\"nav-item\">\r\n                    <ActivablePill text=\"Toate\" icon={\"bi-table\"} to={`${match.url}/all`} />\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <ActivablePill text=\"Grupate\" icon={\"bi-card-list\"} to={`${match.url}/group`} />\r\n                </li>\r\n            </ul>\r\n            <Switch>\r\n                <Route path={match.url} exact>\r\n                    <Redirect to={`${match.url}/all`} />\r\n                </Route>\r\n                <Route path={`${match.url}/all`}>\r\n                    <LettersTableSubpage\r\n                        letters={state.letters}\r\n                        destinations={state.destinations}\r\n                        onAddNew={handleAddNew}\r\n                        onModify={handleModify}\r\n                        onRemove={handleRemove}\r\n                    />\r\n                </Route>\r\n                <Route path={`${match.url}/group`}>\r\n                    <LettersCategorizedSubpage\r\n                        letters={state.letters}\r\n                        destinations={state.destinations}\r\n                        onAddNew={handleAddNew}\r\n                        onModify={handleModify}\r\n                        onRemove={handleRemove}\r\n                    />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction ActivablePill(props: {\r\n    text: string;\r\n    to: string;\r\n    activeOnlyWhenExact?: boolean;\r\n    icon: string;\r\n}) {\r\n    let match = useRouteMatch({\r\n        path: props.to,\r\n        exact: props.activeOnlyWhenExact\r\n    });\r\n    return (\r\n        <Link to={props.to} className={classNames({\"nav-link\": true, \"active\": match})}>\r\n            {props.icon && <span className={`${props.icon} mr-2`} />}\r\n            {props.text}\r\n        </Link>\r\n    );\r\n}\r\n\r\nfunction stateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case \"SET_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case \"PUSH_LETTERS\": {\r\n            let newLetts = [...state.letters];\r\n            [...action.payload].forEach(letter => {\r\n                let index = state.letters.findIndex(lett => lett._id === letter._id);\r\n                if (index === -1)\r\n                    newLetts.push(letter);\r\n                else newLetts[index] = letter;\r\n            });\r\n            newLetts.sort((a, b) => (\r\n                -(a.timestamp !== b.timestamp ?\r\n                    a.timestamp - b.timestamp :\r\n                    a._id - b._id)\r\n            ));\r\n            return {\r\n                ...state,\r\n                letters: newLetts\r\n            };\r\n        }\r\n        case \"PUSH_DESTINATIONS\": {\r\n            let newDests = [...state.destinations];\r\n            [...action.payload].forEach(destination => {\r\n                let index = state.destinations.findIndex(dest => dest._id === destination._id);\r\n                if (index === -1)\r\n                    newDests.push(destination);\r\n                else newDests[index] = destination;\r\n            });\r\n            return {\r\n                ...state,\r\n                destinations: newDests\r\n            };\r\n        }\r\n        case \"REMOVE_LETTER_ID\":\r\n            let newLetts = [...state.letters];\r\n            newLetts = newLetts.filter(lett => lett._id !== action.payload);\r\n            return {\r\n                ...state,\r\n                letters: newLetts\r\n            };\r\n        default: throw new Error();\r\n    }\r\n}","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { Link, Redirect, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport { UserData } from \"./apiTypes\";\r\nimport DestinationsPage from \"./DestinationsPage\";\r\nimport GeneralPage from \"./GeneralPage\";\r\nimport LettersPageRouter from \"./letters/LettersPageRouter\";\r\n\r\nfunction Panel(props: {\r\n    user: UserData,\r\n    onLogout: (reason?: string) => void\r\n}) {\r\n    return (\r\n        <>\r\n            <Nav variant=\"tabs\" className=\"\">\r\n                <Nav.Item>\r\n                    <CustomNavLink label=\"General\" to=\"/general\" />\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <CustomNavLink label=\"Destinatari\" to=\"/destinations\" />\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <CustomNavLink label=\"Scrisori\" to=\"/letters\" />\r\n                </Nav.Item>\r\n            </Nav>\r\n            <div className=\"border-right border-left border-bottom p-2\">\r\n                <Switch>\r\n                        <Route path=\"/general\">\r\n                            <GeneralPage onLogout={props.onLogout}/>\r\n                        </Route>\r\n                        <Route path=\"/destinations\">\r\n                            <DestinationsPage />\r\n                        </Route>\r\n                        <Route path=\"/letters\">\r\n                            <LettersPageRouter />\r\n                        </Route>\r\n                        <Route>\r\n                            <Redirect to=\"/general\" />\r\n                        </Route>\r\n                </Switch>\r\n            </div>\r\n            <div className=\"float-right border border-top-0 px-2 py-0 text-muted\">\r\n                <small>Platformă de Pricop Laurențiu</small>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CustomNavLink({label, to, activeOnlyWhenExact}: {\r\n    label: string,\r\n    to: string,\r\n    activeOnlyWhenExact?: boolean\r\n}) {\r\n    let match = useRouteMatch({\r\n      path: to,\r\n      exact: activeOnlyWhenExact\r\n    });\r\n    return (\r\n        <li className=\"nav-item\">\r\n            <Link className={classNames({\r\n                \"nav-link\": true,\r\n                \"active\": match\r\n            })} to={to}>{label}</Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Panel;","import { AxiosError } from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport API from './api';\r\nimport { UserData } from './apiTypes';\r\nimport LoginForm from './login/LoginForm';\r\nimport RegisterForm from './login/RegisterForm';\r\nimport Panel from './Panel';\r\n\r\nfunction App() {\r\n\tlet [currentUser, setCurrentUser] = useState<UserData | null>(null);\r\n\tlet [isInitializing, setIsInitializing] = useState(true);\r\n\tlet [error, setError] = useState<string | null>(null);\r\n\tlet [currentPage, setCurrentPage] = useState<\"login\" | \"register\">(\"login\");\r\n\tlet [darkMode, setDarkMode] = useState(() => {\r\n\t\tlet hourNow = new Date().getHours();\r\n\t\treturn !(hourNow >= 7 && hourNow <= 18);\r\n\t});\r\n\tuseEffect(() => {\r\n\t\t// this will most probably fail, but if it doesn't, it means\r\n\t\t//  the user is logged in (session cookie is still valid) so\r\n\t\t//  go ahead and automatically log them in\r\n\t\tAPI.get(\"/user\").then((response) => {\r\n\t\t\tsetCurrentUser(response.data.data);\r\n\t\t\tsetIsInitializing(false);\r\n\t\t}).catch((reason: AxiosError) => {\r\n\t\t\tlet data = reason.response?.data;\r\n\t\t\tif (data && (data.status !== \"access-denied\" || data.reason !== \"not-logged-in\")) {\r\n\t\t\t\tsetError(\"Nu se poate comunica cu serverul, acesta a returnat o eroare.\");\r\n\t\t\t} else setIsInitializing(false);\r\n\t\t});\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tstyleModeSwitch();\r\n\t\tfunction styleModeSwitch() {\r\n\t\t\tlet elem = document.getElementById(\"stylesheetLink\");\r\n\t\t\tif (!elem) {\r\n\t\t\t\talert(\"Nu s-a găsit elementul <link> necesar. Nu se poate continua.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet prefix = elem.getAttribute(\"data-prefix\") ?? \"\";\r\n\t\t\tif (!darkMode) {\r\n\t\t\t\t// switch to light mode\r\n\t\t\t\telem.setAttribute(\"href\", prefix + \"/style/bootstrap.united.min.css\");\r\n\t\t\t} else {\r\n\t\t\t\t// switch to dark mode\r\n\t\t\t\telem.setAttribute(\"href\", prefix + \"/style/bootstrap.superhero.min.css\");\r\n\t\t\t}\r\n\t\t}\r\n\t}, [darkMode]);\r\n\r\n\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<div className=\"container py-3 px-md-0 px-1\">\r\n\t\t\t\t<div className=\"clearfix mb-2 mx-2 mx-md-0\">\r\n\t\t\t\t\t<h1 className=\"d-inline\">Manager Poștă Fizică</h1>\r\n\t\t\t\t\t<button className=\"btn btn-outline-primary float-right btn-sm\" onClick={() => setDarkMode(!darkMode)}>\r\n\t\t\t\t\t\t{darkMode && \"Mod întunecat\"}\r\n\t\t\t\t\t\t{!darkMode && \"Mod luminos\"}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"d-md-none alert alert-warning\">\r\n\t\t\t\t\tFolosiți un dispozitiv mobil. Această aplicație web nu este (încă) optimizată pentru o experiență mobilă,\r\n\t\t\t\t\tdar puteți continua.\r\n\t\t\t\t</div>\r\n\t\t\t\t{ error && <div className=\"alert alert-danger\">{error}</div>}\r\n\r\n\t\t\t\t{isInitializing && <span className=\"spinner-border\" />}\r\n\r\n\t\t\t\t{!currentUser &&\r\n\t\t\t\t!isInitializing &&\r\n\t\t\t\tcurrentPage === \"login\" &&\r\n\t\t\t\t\t<LoginForm\r\n\t\t\t\t\t\tonLogin={(user) => {\r\n\t\t\t\t\t\t\tsetCurrentUser(user);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonPageSwitch={() => { setCurrentPage(\"register\") }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{!currentUser && !isInitializing && currentPage === \"register\" && <RegisterForm onPageSwitch={() => { setCurrentPage(\"login\") }} />}\r\n\r\n\t\t\t\t{currentUser && !isInitializing &&\r\n\t\t\t\t\t<Panel\r\n\t\t\t\t\t\tuser={currentUser}\r\n\t\t\t\t\t\tonLogout={(reason) => {\r\n\t\t\t\t\t\t\tsetCurrentUser(null);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n// import \"./style/bootstrap.superhero.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}